// Factorization of large integers into their prime factors
// Uses Lenstra's Elliptic Curves Algorithm

// Originally written by Ami Fischman
// Modified by Paul Herman
// Ported to Inca by B. Liebl

// For background information on this code and more on
// number theory check out
// http://www.frenchfries.net/paul/factoring/

// could be a LOT faster with some optimization

compiler_setting "stack_size=128000";	// change stack size

const int kIncr=1;	// K += kIncr, get new curve when old one bonks out
const int bIncr=30;	// b += bIncr, when trying a new curve
const int maxTriesB=40;	// number of b changes before changing K

// initial point (x,y) determines the shape of the curve
const int kStartX=1;	// x coordinate of the initial point to try
const int kStartY=1;	// y coordinate of the initial point to try

BigInt mlcm(BigInt n)
{
// lcm(1,2,3,...,n)
if(n<3)
return 2;
else
return lcm(mlcm(n-1),n);
}

BigInt computeK(BigInt k)
{
return mlcm(k);
}

BigInt lenstraFactor(BigInt n,BigInt inK)
{
BigInt b,c,t,k,g,x,y;
int bits,bTries;

if(n==6)
return 2;
if(gcd(n,6)!=1)
return gcd(n,6);

b=1;	// setup our starting curve
k=computeK(inK);
bits=bitlen(k);
bTries=0;
while(true)
{
// setup our starting points
x=kStartX;
y=kStartY;
// calculate curve coefficients
c=(y*y)-(x*x*x)-(b*x);

// make sure curve is OK to use (check discriminant)

// calculate discriminant
t=gcd(4*(b*b*b)+27*(c*c),n);

// if 1 < t < n, we got a factor!
while(t!=1)
{
if(t==n)
{
// discriminant must not == n
b+=bIncr;
c=y*y-x*x*x-b*x;
t=gcd(4*(b*b*b)+27*(c*c),n);
continue;
}
// Hey, we got a factor along the way!
// By now, gcd(discriminant,n) == 1
return t;
}

// Now we are ready to start adding points on the curve
// This is done by calculating 2(x,y),4(x,y),8(x,y),...
// and addign them to (sumX,sumY) when needed.
BigInt sumX,sumY,slope;
BigInt tempx,tempy;
bool newcurve;

sumX=0;
sumY=0;
newcurve=false;

if(bTries>maxTriesB)
newcurve=true;
else
{
// compute k*(x,y) usings powers of 2
for(int i=0;i<bits;i++)
{
// double the point(x,y)
tempx=x;
tempy=2*y;
g=gcd(tempy,n);
if(1<g&&g<n)
return g;
if(g==n)
{
newcurve=true;
break;
}
slope=modinv(tempy,n)*(3*sqr(tempx)+b);	// now, g == 1
x=(sqr(slope)-2*tempx)%n;
y=(slope*(tempx-x)-y)%n;

if(not btst(k,i))
continue;
if(sumY!=0)
{
sumX=x;
sumY=y;
continue;
}

// need to add(x,y) in to sum(x,y)
tempx=(x-sumX)%n;
tempy=(y-sumY)%n;
g=gcd(tempx,n);
if(1<g&&g<n)
{
newcurve=true;
break;
}
slope=modinv(tempx,n)*tempy;	// at this point, g == 1
tempx=((sqr(slope)-sumX)-x)%n;
tempy=(slope*(sumX-tempx)-sumY)%n;
sumX=tempx;
sumY=tempy;
}
}

if(newcurve)
{
// give up and try a different curve and k
b=1;	// new constant
bTries=0;	// reset iterations
do{
inK+=kIncr;
}while(k==computeK(inK));
k=computeK(inK);	// new k
bits=bitlen(k);

print<<".";
print.flush();
}
else
{
b+=bIncr;	// new curve
bTries++;	// keep track how many times we do this
}
}
}

BigInt factor(BigInt n,BigInt k)
{
BigInt f;
f=lenstraFactor(n,k);
if(isPrime(f))
return f;
else
return factor(f,k);
}

BigInt optimalK(BigInt n)
{
BigInt k;

// try to guess optimal k, based on n
k= cast<int>(bitlen(n)/log(10,2));
k=sqr(k)/2;
if(k<2)
k=2;
return k;
}

module MillerRabin{
/* c */
// MillerRabin probability prime test
// see MillerRabin.a for details

enum {
inconclusive,
composite
}

int runTest(
const BigInt &n,
const BigInt &b,
const BigInt &m,
int q)
{
// check condition (a)
if(powmod(b,m,n)==1)
return inconclusive;

// check condition (b)
const BigInt n_minus_one=n-1;

for(int i=0;i<q;i++)
{
if(powmod(b,m<<i,n)==n_minus_one)
return inconclusive;
}

// neither (a) nor (b) fulfilled
return composite;
}

bool isPrime(BigInt n)
{
// declare the confidence parameter. this
// parameter defines how many tests will
// be performed.
int confidence=5;

// find m and q. for q a 32-bit integer
// is sufficient, since we don't want to
// deal with numbers bigger than 2^(2^32)
// today.
BigInt m=n-1;
int q=0;

if(m==0)
return false;

while(not btst(m,q))
q+=1;

m>>=q;

for(int i=0;i<confidence;i++)
{
// Ÿpick a basis b. to be really correct we
// should check if we have used the basis
// already. since this is a demo program
// and the numbers we test will be large,
// this step is omitted here.
BigInt b;
b=random(n-1)+1;

// run Rabin-Miller test for basis b
if(runTest(n,b,m,q)==composite)
return false;
}

return true;
}
}

void main()
{
BigInt n,k,f;
bool chooseK=false;

// number to factorize
//n = "54684343222";
//n = "5435345431";
//n = "603709";
//n = "1715761513";
//k = 25;
chooseK=true;

print<<"enter a number to factorize: ";
input>>n;
if(n<2)
{
print<<"illegal number";
return;
}

if(chooseK)
k=optimalK(n);

print<<"using initial k = "<<k<<endl;

while(not isPrime(n))
{
f=factor(n,k);
print<<"\nfound factor "<<f<<endl;
n/=f;
if(chooseK)
k=optimalK(n);
}

print<<"\nfound factor "<<n<<endl;
}


