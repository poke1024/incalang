// HIDDEN GLOBALS
// #input
// #print
// #endl
// #pi
// #pi2
// #pih
// #eul

// THREAD LIBRARY
class Thread {
public:
	native void create();
	native void destroy();
	native void wake();
	native void block();
	native void sleepMillis( long );
	native void sleepMicros( long );
	native void setName( const String& );
	native String name();
	native void setPriority( int );
	native int priority();
	abstract void run();
private:
	void* data;
}

class Mutex {
public:
	native void create();
	native void destroy();
	native void lock();
	native void unlock();
private:
	void* data;
}

class Signal {
public:
	native void create();
	native void destroy();
	native void signal();
	native void wait();
	native void waitFor( long );
	native void waitUntil( long );
private:
	void* data;
}

class Queue {
public:
	static native Queue* make( int, int );
	native void create();
	native void destroy();
	native void put( const void* );
	native void get( void* );
	native bool putCond( const void* );
	native bool getCond( void* );
	native bool putUntil( const void*, long );
	native bool getUntil( void*, long );
private:
	void* data;
}

native long millis();
native long micros();
native void systemTask();
native void enterRealTime();
native void leaveRealTime();
native long systemLatency();
native void resetSystemLatency();

native void sleepMillis( long );
native void sleepMicros( long );

// IO LIBRARY
native void enablePorts( int, int );
native void disablePorts( int, int );
native byte inp( int );
native void outp( int, byte );

// SYSTEM LIBRARY
native void exit( int );
native void fatal( const String& );
native void showCursor();
native void hideCursor();
native String date();
native String time();
native void bmove( const void*, void*, int );

// MIDI LIBRARY
native void selectMidiInstrument( int );
native void sendMidiMessage( byte, byte, bool );
native void allMidiNotesOff();

// INPUT SERVICES LIBRARY
native int mousex();
native int mousey();
native int mousez();
native bool mousek( int k = 0 );
native int waitmouse();

native int diMousex();
native int diMousey();
native int diMousez();
native bool diMousek( int k = 0 );
native void diUpdate();

ConsoleInputStream input;
native String inkey();
native String waitkey();
native bool vkeyDown( int );

// PRINT SERVICES LIBRARY
native int crscol();
native int crslin();
native void htab( int );
native void vtab( int );
native String at( int, int );
native String forecolor( const Color& );
native String backcolor( const Color& );
ConsoleOutputStream print;
String endl = "\n";

// DIALOG SERVICES LIBRARY
class ColorChooser {
public:
	native bool choose( Color& );	
private:
	void* data;
}

class OpenFileChooser {
public:
	native void create();
	native void destroy();
	native bool choose( String& );	
private:
	void* data;
}

class SaveFileChooser {
public:
	native void create();
	native void destroy();
	native bool choose( String& );	
private:
	void* data;
}

// FILE SERVICES LIBRARY
class FileIterator {
public:
	native void create();
	native void destroy();
	native void setFilter( const String& );
	native bool next();
	native String name();
private:
	void* data;
}

native String currentDir();
native void changeDir( const String& );
native void createDir( const String& );
native void deleteDir( const String& );

native void copyFile( const String&, const String& );
native void moveFile( const String&, const String& );
native void deleteFile( const String& );
native long diskFree( const String& );
native bool fileExists( const String& );
native void exec( const String&, const StringArray& );

// CONSOLE LIBRARY
class Console {
public:
	native void makeCurrent();
	native void setTitle( const String& );
	native void setFullscreen( bool );
	native void setDoubleBuffer( bool );
	native float fps();
private:
	void* data;
}

class G3Console extends Console {
public:
	native void create();
	native void destroy();
	native void setResolution( int, int );
	native void open();
	native void swap();
	native int width();
	native int height();
	native bool resized();
}

class G2Console extends G3Console {
public:
	native void open();
}

class PixmapConsole extends Console {
public:
	native void create();
	native void destroy();
	native void setResolution( int, int );
	native void open();
	native void swap();
	native int width();
	native int height();
	native void makePixmapPort();
}

// ARRAY LIBRARY
class ByteArray {
public:
	native void create();
	native void destroy();
	native void append( byte );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, byte );
	native int search( byte, int i = 0 );
	native int bsearch( byte );
	native void binsidx( byte );
private:
	void* data;
	int count;
	int alloc;
}

class IntArray {
public:
	native void create();
	native void destroy();
	native void append( int );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, int );
	native int search( int, int i = 0 );
	native int bsearch( int );
	native void binsidx( int );
private:
	void* data;
	int count;
	int alloc;
}

class LongArray {
public:
	native void create();
	native void destroy();
	native void append( long );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, long );
	native int search( long, int i = 0 );
	native int bsearch( long );
	native void binsidx( long );
private:
	void* data;
	int count;
	int alloc;
}

class FloatArray {
public:
	native void create();
	native void destroy();
	native void append( float );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, float );
	native int search( float, int i = 0 );
	native int bsearch( float );
	native void binsidx( float );
private:
	void* data;
	int count;
	int alloc;
}

class DoubleArray {
public:
	native void create();
	native void destroy();
	native void append( double );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, double );
	native int search( double, int i = 0 );
	native int bsearch( double );
	native void binsidx( double );
private:
	void* data;
	int count;
	int alloc;
}

class PointerArray {
public:
	native void create();
	native void destroy();
	native void append( void* );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, void* );
	native int search( void*, int i = 0 );
	native int bsearch( void* );
	native void binsidx( void* );
private:
	void* data;
	int count;
	int alloc;
}

class StringArray {
public:
	native void create();
	native void destroy();
	native void append( const String& );
	native void remove( int, int c = 1 );
	native int count();
	native void insert( int, const String& );
	native int search( const String&, int i = 0 );
	native int bsearch( const String& );
	native void binsidx( const String& );
private:
	void* data;
	int count;
	int alloc;
}

native byte& operator[]( const ByteArray&, int );
native int& operator[]( const IntArray&, int );
native long& operator[]( const LongArray&, int );
native float& operator[]( const FloatArray&, int );
native double& operator[]( const DoubleArray&, int );
native void*& operator[]( const PointerArray&, int );
native String& operator[]( const StringArray&, int );

native OutputStream& operator<<( OutputStream& x, const ByteArray& );
native OutputStream& operator<<( OutputStream& x, const IntArray& );
native OutputStream& operator<<( OutputStream& x, const LongArray& );
native OutputStream& operator<<( OutputStream& x, const FloatArray& );
native OutputStream& operator<<( OutputStream& x, const DoubleArray& );
native OutputStream& operator<<( OutputStream& x, const PointerArray& );
native OutputStream& operator<<( OutputStream& x, const StringArray& );

native void sort( byte*, int, int* itab = null );
native void sort( int*, int, int* itab = null );
native void sort( long*, int, int* itab = null );
native void sort( float*, int, int* itab = null );
native void sort( double*, int, int* itab = null );
native void sort( void**, int, int* itab = null );

// SGL LIBRARY
native void sglClear();
native void sglSetColor( const Color& );
native void sglSetColor( float, float, float );
native void sglSetColor( const String& );
native void sglSetIndexedColor( int );
native void sglMoveTo( float, float );
native void sglLineTo( float, float );
native void sglFrameRect( float, float, float, float );
native void sglFillRect( float, float, float, float );
native void sglFillOval( float, float, float, float );
native void sglFrameOval( float, float, float, float );
native void sglSetFont( const String& );
native void sglSetFontSize( float );
native float sglGetFontSize();
native float sglGetFontAscent();
native float sglGetFontDescent();
native float sglTextWidth( const String& );
native void sglDrawText( const String& );
native void sglLoadBitmapFont( const String&, int );
native void sglLoadTextureFont( const String& );
native void sglFlush();

// MATH LIBRARY
native double abs( double );
native long abs( long );
native int abs( int );
native double sgn( double );
native long sgn( long );
native int sgn( int );
native double exp( double );
native double log( double );
native double log10( double );
native double log( double, double );
native double sin( double );
native double cos( double );
native double tan( double );
native double asin( double );
native double acos( double );
native double atan( double );
native double atan2( double, double );
native double floor( double );
native double ceil( double );
native double sqrt( double );
native bool odd( long );
native bool odd( int );
native bool even( long );
native bool even( int );
native double toint( double );
native float toint( float );
native double trunc( double );
native float trunc( float );
native double fract( double );
native float fract( float );
native double round( double );
native float round( float );
native double round( double, int );
native double sqr( double );
native float sqr( float );
native long sqr( long );
native int sqr( int );
native double deg( double );
native double rad( double );
native long bclr( long, int );
native long bset( long, int );
native long bchg( long, int );
native bool btst( long, int );
native float pow( float, float );
native double pow( double, double );
native int gcd( int, int );
native long gcd( long, long );
native unsigned long comb( int, int );
native int  min( int, int );
native long  min( long, long );
native float  min( float, float );
native double  min( double, double );
native int  max( int, int );
native long  max( long, long );
native float  max( float, float );
native double  max( double, double );

native double clamp( double, double, double );
native float clamp( float, float, float );
native int clamp( int, int, int );
native double boxstep( double, double, double );
native float boxstep( float, float, float );
native double smoothstep( double, double, double );
native float smoothstep( float, float, float );
native double lerp( double, double, double );
native float lerp( float, float, float );
native double cosip( double, double, double );
native float cosip( float, float, float );
native double cubip( double, double, double, double, double );
native float cubip( float, float, float, float, float );
native float spline( float, int, const float* );
native Point spline( float, int, const Point* );

native byte rol( byte, int );
native byte ror( byte, int );
native short rol( short, int );
native short ror( short, int );
native int rol( int, int );
native int ror( int, int );
native long rol( long, int );
native long ror( long, int );

const double pi = 3.1415926535897932385;
const double pi2 = 6.2831853071795864770;
const double pih = 1.5707963267948966192;
const double eul = 2.7182818284590452354;

// NOISE LIBRARY
native float snoise( float );
native float snoise( float, float );
native float snoise( const Point& );
native Point psnoise( const Point& );

native float noise( float );
native float noise( float, float );
native float noise( const Point& );
native Point pnoise( const Point& );

native float fBm( const Point&, float, float, float );

native int hash( float );
native int hash( float, float );
native int hash( const Point& );
native int hash( int, int );
native int hash( int, int, int );
native int hash( const void*, int );
native int hash( const String& );

// RANDOM LIBRARY
native void randomize( long );
native float rnd();
native int random( int );

// STRING LIBRARY
class String {
public:
	native void create();
	native void create( const String& s );
	native void destroy();

private:
	char* text;
	int length;
}

native int len( const String& );
native String upper( const String& );
native String lower( const String& );
native String left( const String&, int n = 1 );
native String right( const String&, int n = 1 );
native String mid( const String&, int );
native String mid( const String&, int, int );
native int instr( const String&, const String& s, int n = 0 );
native int grep( const String&, const String&, int i = 0, byte flags = 0 );
native int asc( const String& );
native double val( const String& );
native int valn( const String& );

native String& operator=( String&, const String& );
native String operator+( const String&, const String& );

native bool operator==( const String&, const String& );
native bool operator!=( const String&, const String& );
native bool operator<( const String&, const String& );
native bool operator>( const String&, const String& );
native bool operator<=( const String&, const String& );
native bool operator>=( const String&, const String& );

native char& operator[]( const String&, int );
native String string( int, const String& );
native String chr( int );
native String str( double );
native String bin( long );
native String oct( long );
native String hex( long );

// BIGINT LIBRARY
class BigInt {
public:
	native void create();
	native void create( const BigInt& s );
	native void destroy();

private:
	void* data;
}

native BigInt& operator=( BigInt&, const BigInt& );
native BigInt operator+( const BigInt&, const BigInt& );
native BigInt operator-( const BigInt&, const BigInt& );
native BigInt operator*( const BigInt&, const BigInt& );
native BigInt operator/( const BigInt&, const BigInt& );
native BigInt operator%( const BigInt&, const BigInt& );
native BigInt operator<<( const BigInt&, int );
native BigInt operator>>( const BigInt&, int );
native BigInt operator-( const BigInt& );
native BigInt& operator++( BigInt& );
native BigInt operator cast( int );
native BigInt operator cast( long );

native bool operator==( const BigInt&, const BigInt& );
native bool operator!=( const BigInt&, const BigInt& );
native bool operator<( const BigInt&, const BigInt& );
native bool operator>( const BigInt&, const BigInt& );
native bool operator<=( const BigInt&, const BigInt& );
native bool operator>=( const BigInt&, const BigInt& );

native BigInt& operator=( BigInt&, const String& );
native String str( const BigInt& );
native String bin( const BigInt& );
native String hex( const BigInt& );
native String oct( const BigInt& );
native long val( const BigInt& );

native BigInt abs( const BigInt& );
native int sgn( const BigInt& );
native BigInt sqrt( const BigInt& );
native BigInt sqr( const BigInt& );
native bool odd( const BigInt& );
native bool even( const BigInt& );
native BigInt bclr( const BigInt&, int );
native BigInt bset( const BigInt&, int );
native BigInt bchg( const BigInt&, int );
native bool btst( const BigInt&, int );
native int bitlen( const BigInt& );
native BigInt pow( const BigInt&, const BigInt& );
native BigInt powmod( const BigInt&, const BigInt&, const BigInt& );
native BigInt gcd( const BigInt&, const BigInt& );
native BigInt egcd( const BigInt&, const BigInt&, BigInt&, BigInt& );
native BigInt lcm( const BigInt&, const BigInt& );
native BigInt modinv( const BigInt&, const BigInt& );
native BigInt bigpow( unsigned long, unsigned long );
native BigInt random( const BigInt& );

// COMPLEX LIBRARY
class Complex {
	double real;
	double imag;
}

native Complex complex( double, double );
native Complex operator+( const Complex&, const Complex& );
native Complex operator-( const Complex&, const Complex& );
native Complex operator/( const Complex&, const Complex& );
native Complex operator*( const Complex&, const Complex& );
native Complex operator-( const Complex& );
native Complex operator cast( double );
native double abs( const Complex& );
native Complex sqrt( const Complex& );
native Complex conjugate( const Complex& );
native Complex inverse( const Complex& );
native double real( const Complex& );
native double imag( const Complex& );

// POINT LIBRARY
class Point {
	float x;
	float y;
	float z;
}

native Point point( float, float, float );
native Point operator+( const Point&, const Point& );
native Point operator-( const Point&, const Point& );
native Point operator*( const Point&, float );
native Point operator*( float, const Point& );
native Point operator/( const Point&, float );
native float operator*( const Point&, const Point& );
native Point operator^( const Point&, const Point& );
native Point operator-( const Point& );
native float length( const Point& );
native float distance( const Point&, const Point& );
native Point normalize( const Point& );
native float xcomp( const Point& );
native float ycomp( const Point& );
native float zcomp( const Point& );
native float* comp( const Point& );
native Point rotate( const Point&, float, const Point&, const Point& );
native Point mix( const Point&, const Point&, float );

// VECTOR LIBRARY
typedef Point Vector;
native Vector vector( float, float, float );

// COLOR LIBRARY
typedef Point Color;
native Color color( float, float, float );
native Color color( int );
native Color color( const String& );

// IO LIBRARY
class OutputStream {
public:
	abstract void flush();

	native void writeChar( char );
	native void writeBool( bool );
	native void writeByte( int );
	native void writeWord( int );
	native void writeQuad( unsigned int );
	native void writeOcta( unsigned long );
	native void writeFloat( float );
	native void writeDouble( double );
	native void writeString( const String& a );
	native void writePointer( const void* p );
	native void writeBytes( const byte* a, int count );
	abstract int writeSomeBytes( const byte* a, int count );

protected:
	native void writeChunk( const char* s, int count );
}

class InputStream {
public:
	native char readChar();
	native bool readBool();
	native int readByte();
	native int readWord();
	native unsigned int readQuad();
	native unsigned long readOcta();
	native float readFloat();
	native double readDouble();
	native String readString();
	native void* readPointer();
	native void readBytes( byte* a, int count );
	abstract int readSomeBytes( byte* a, int count );
	
protected:
	native String readChunk();
}

class ConsoleOutputStream extends OutputStream {
public:
	native void flush();
	native int writeSomeBytes( const byte* a, int count );

protected:
	native void writeChunk( const char* s, int count );
}

class ConsoleInputStream extends InputStream {
public:
	native int readSomeBytes( byte* a, int count );
	
protected:
	native String readChunk();
}

class File extends InputStream, OutputStream {
public:
	native void create();
	native void destroy();
	
	native void openForReading( const String& name );
	native void openForWriting( const String& name );
	native void openForUpdating( const String& name );
	native void close();
	native void flush();
	native long size();
	native long tell();
	native void seekAbsolute( long );
	native void seekRelative( long );
	native void seekFromEnd( long );

	native void writeBytes( const byte* a, int count );
	native int writeSomeBytes( const byte* a, int count );
	native void readBytes( byte* a, int count );
	native int readSomeBytes( byte* a, int count );
	
private:
	void* data;
}

class MemoryBuffer extends InputStream, OutputStream {
public:
	native void create();
	native void destroy();
	
	native void flush();
	native long size();
	native long tell();
	native void seekAbsolute( long );
	native void seekRelative( long );
	native void seekFromEnd( long );

	native void writeBytes( const byte* a, int count );
	native int writeSomeBytes( const byte* a, int count );
	native void readBytes( byte* a, int count );
	native int readSomeBytes( byte* a, int count );
	
private:
	void* data;
}

class InflaterStream extends InputStream {
public:
	native void create();
	native void destroy();
	
	native void attach( InputStream*, int );

	native void readBytes( byte* a, int count );
	native int readSomeBytes( byte* a, int count );
	
private:
	void* data1;
	void* data2;
}

enum {
	Z_NO_COMPRESSION = 0,
	Z_BEST_SPEED = 1,
	Z_BEST_COMPRESSION = 9
}

class DeflaterStream extends OutputStream {
public:
	native void create();
	native void destroy();
	
	native void attach( OutputStream*, int level = Z_BEST_COMPRESSION );
	native void flush();

	native void writeBytes( const byte* a, int count );
	native int writeSomeBytes( const byte* a, int count );
	
private:
	void* data1;
	void* data2;
}

native OutputStream& operator<<( OutputStream& x, const void* p );
native OutputStream& operator<<( OutputStream& x, bool y );
native OutputStream& operator<<( OutputStream& x, char y );
native OutputStream& operator<<( OutputStream& x, int y );
native OutputStream& operator<<( OutputStream& x, long y );
native OutputStream& operator<<( OutputStream& x, float y );
native OutputStream& operator<<( OutputStream& x, double y );
native OutputStream& operator<<( OutputStream& x, const String& );
native OutputStream& operator<<( OutputStream& x, const BigInt& );
native OutputStream& operator<<( OutputStream& x, const Complex& );
native OutputStream& operator<<( OutputStream& x, const Point& );

native InputStream& operator>>( InputStream& x, char& y );
native InputStream& operator>>( InputStream& x, int& y );
native InputStream& operator>>( InputStream& x, long& y );
native InputStream& operator>>( InputStream& x, float& y );
native InputStream& operator>>( InputStream& x, double& y );
native InputStream& operator>>( InputStream& x, String& s );
native InputStream& operator>>( InputStream& x, BigInt& );

enum {
	VKEY_BACK			= 14,
	VKEY_TAB			= 15,
	VKEY_RETURN			= 28,
	VKEY_RSHIFT			= 54,
	VKEY_ESCAPE			= 1,
	VKEY_SPACE			= 57,
	VKEY_LEFT			= 203,
	VKEY_UP				= 200,
	VKEY_RIGHT			= 205,
	VKEY_DOWN			= 208,
	VKEY_DELETE			= 211
}

// PIXMAP LIBRARY
enum PixelFormat {
	PIXEL_FORMAT_8_INDEXED_GRAY	= 0,
	PIXEL_FORMAT_8_INDEXED_COLOR	= 1,
	PIXEL_FORMAT_24_RGB		= 26,
	PIXEL_FORMAT_24_GBR		= 27,
	PIXEL_FORMAT_24_BRG		= 28,
	PIXEL_FORMAT_24_BGR		= 29,
	PIXEL_FORMAT_24_GRB		= 30,
	PIXEL_FORMAT_24_RBG		= 31,
	PIXEL_FORMAT_32_RGBA		= 32
}

class Pixmap {
public:
	native void create();
	native void destroy();
	
	native void allocate( int, int, PixelFormat format = PIXEL_FORMAT_32_RGBA );
	native void load( const String& );
	native void save( const String& );
	native void release();
	native void convert( PixelFormat format );
	
	native byte* pixels();
	native int width();
	native int height();
	native int pitch();
	
private:
	void* data;
}

class G2Pixmap extends Pixmap {
public:
	native void create();
}

class G3Pixmap extends Pixmap {
public:
	native void create();
}

native void setColor( int );
native void setColor( int, int, int );
native void setColor( int, int, int, int );
native void putPixel( int, int );
native unsigned int getPixel( int, int );
native void moveTo( int, int );
native void lineTo( int, int );
native void frameRect( int, int, int, int );
native void fillRect( int, int, int, int );
native void frameOval( int, int, int, int );
native void fillOval( int, int, int, int );
native void blit( Pixmap*, int, int, int, int, int, int );

native void smoothThickness( float );
native void smoothThickness( float, float );
native void smoothMoveTo( float, float );
native void smoothLineTo( float, float );
native void smoothFrameRect( float, float, float, float );
native void smoothFrameOval( float, float, float, float );

native void setPixmapPort( Pixmap* pixmap );
native Pixmap* getPixmapPort();

// DEBUG LIBRARY

native void debugger();

// OPENGL GLUE

typedef unsigned int GLenum;
typedef unsigned byte GLboolean;
typedef unsigned int GLbitfield;
typedef signed byte GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned byte GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;

enum {
GL_ACCUM=0x0100,
GL_LOAD=0x0101,
GL_RETURN=0x0102,
GL_MULT=0x0103,
GL_ADD=0x0104,
GL_NEVER=0x0200,
GL_LESS=0x0201,
GL_EQUAL=0x0202,
GL_LEQUAL=0x0203,
GL_GREATER=0x0204,
GL_NOTEQUAL=0x0205,
GL_GEQUAL=0x0206,
GL_ALWAYS=0x0207,
GL_CURRENT_BIT=0x00000001,
GL_POINT_BIT=0x00000002,
GL_LINE_BIT=0x00000004,
GL_POLYGON_BIT=0x00000008,
GL_POLYGON_STIPPLE_BIT=0x00000010,
GL_PIXEL_MODE_BIT=0x00000020,
GL_LIGHTING_BIT=0x00000040,
GL_FOG_BIT=0x00000080,
GL_DEPTH_BUFFER_BIT=0x00000100,
GL_ACCUM_BUFFER_BIT=0x00000200,
GL_STENCIL_BUFFER_BIT=0x00000400,
GL_VIEWPORT_BIT=0x00000800,
GL_TRANSFORM_BIT=0x00001000,
GL_ENABLE_BIT=0x00002000,
GL_COLOR_BUFFER_BIT=0x00004000,
GL_HINT_BIT=0x00008000,
GL_EVAL_BIT=0x00010000,
GL_LIST_BIT=0x00020000,
GL_TEXTURE_BIT=0x00040000,
GL_SCISSOR_BIT=0x00080000,
GL_ALL_ATTRIB_BITS=0x000fffff,
GL_POINTS=0x0000,
GL_LINES=0x0001,
GL_LINE_LOOP=0x0002,
GL_LINE_STRIP=0x0003,
GL_TRIANGLES=0x0004,
GL_TRIANGLE_STRIP=0x0005,
GL_TRIANGLE_FAN=0x0006,
GL_QUADS=0x0007,
GL_QUAD_STRIP=0x0008,
GL_POLYGON=0x0009,
GL_ZERO=0,
GL_ONE=1,
GL_SRC_COLOR=0x0300,
GL_ONE_MINUS_SRC_COLOR=0x0301,
GL_SRC_ALPHA=0x0302,
GL_ONE_MINUS_SRC_ALPHA=0x0303,
GL_DST_ALPHA=0x0304,
GL_ONE_MINUS_DST_ALPHA=0x0305,
GL_DST_COLOR=0x0306,
GL_ONE_MINUS_DST_COLOR=0x0307,
GL_SRC_ALPHA_SATURATE=0x0308,
GL_TRUE=1,
GL_FALSE=0,
GL_CLIP_PLANE0=0x3000,
GL_CLIP_PLANE1=0x3001,
GL_CLIP_PLANE2=0x3002,
GL_CLIP_PLANE3=0x3003,
GL_CLIP_PLANE4=0x3004,
GL_CLIP_PLANE5=0x3005,
GL_BYTE=0x1400,
GL_UNSIGNED_BYTE=0x1401,
GL_SHORT=0x1402,
GL_UNSIGNED_SHORT=0x1403,
GL_INT=0x1404,
GL_UNSIGNED_INT=0x1405,
GL_FLOAT=0x1406,
GL_2_BYTES=0x1407,
GL_3_BYTES=0x1408,
GL_4_BYTES=0x1409,
GL_DOUBLE=0x140A,
GL_NONE=0,
GL_FRONT_LEFT=0x0400,
GL_FRONT_RIGHT=0x0401,
GL_BACK_LEFT=0x0402,
GL_BACK_RIGHT=0x0403,
GL_FRONT=0x0404,
GL_BACK=0x0405,
GL_LEFT=0x0406,
GL_RIGHT=0x0407,
GL_FRONT_AND_BACK=0x0408,
GL_AUX0=0x0409,
GL_AUX1=0x040A,
GL_AUX2=0x040B,
GL_AUX3=0x040C,
GL_NO_ERROR=0,
GL_INVALID_ENUM=0x0500,
GL_INVALID_VALUE=0x0501,
GL_INVALID_OPERATION=0x0502,
GL_STACK_OVERFLOW=0x0503,
GL_STACK_UNDERFLOW=0x0504,
GL_OUT_OF_MEMORY=0x0505,
GL_2D=0x0600,
GL_3D=0x0601,
GL_3D_COLOR=0x0602,
GL_3D_COLOR_TEXTURE=0x0603,
GL_4D_COLOR_TEXTURE=0x0604,
GL_PASS_THROUGH_TOKEN=0x0700,
GL_POINT_TOKEN=0x0701,
GL_LINE_TOKEN=0x0702,
GL_POLYGON_TOKEN=0x0703,
GL_BITMAP_TOKEN=0x0704,
GL_DRAW_PIXEL_TOKEN=0x0705,
GL_COPY_PIXEL_TOKEN=0x0706,
GL_LINE_RESET_TOKEN=0x0707,
GL_EXP=0x0800,
GL_EXP2=0x0801,
GL_CW=0x0900,
GL_CCW=0x0901,
GL_COEFF=0x0A00,
GL_ORDER=0x0A01,
GL_DOMAIN=0x0A02,
GL_CURRENT_COLOR=0x0B00,
GL_CURRENT_INDEX=0x0B01,
GL_CURRENT_NORMAL=0x0B02,
GL_CURRENT_TEXTURE_COORDS=0x0B03,
GL_CURRENT_RASTER_COLOR=0x0B04,
GL_CURRENT_RASTER_INDEX=0x0B05,
GL_CURRENT_RASTER_TEXTURE_COORDS=0x0B06,
GL_CURRENT_RASTER_POSITION=0x0B07,
GL_CURRENT_RASTER_POSITION_VALID=0x0B08,
GL_CURRENT_RASTER_DISTANCE=0x0B09,
GL_POINT_SMOOTH=0x0B10,
GL_POINT_SIZE=0x0B11,
GL_POINT_SIZE_RANGE=0x0B12,
GL_POINT_SIZE_GRANULARITY=0x0B13,
GL_LINE_SMOOTH=0x0B20,
GL_LINE_WIDTH=0x0B21,
GL_LINE_WIDTH_RANGE=0x0B22,
GL_LINE_WIDTH_GRANULARITY=0x0B23,
GL_LINE_STIPPLE=0x0B24,
GL_LINE_STIPPLE_PATTERN=0x0B25,
GL_LINE_STIPPLE_REPEAT=0x0B26,
GL_LIST_MODE=0x0B30,
GL_MAX_LIST_NESTING=0x0B31,
GL_LIST_BASE=0x0B32,
GL_LIST_INDEX=0x0B33,
GL_POLYGON_MODE=0x0B40,
GL_POLYGON_SMOOTH=0x0B41,
GL_POLYGON_STIPPLE=0x0B42,
GL_EDGE_FLAG=0x0B43,
GL_CULL_FACE=0x0B44,
GL_CULL_FACE_MODE=0x0B45,
GL_FRONT_FACE=0x0B46,
GL_LIGHTING=0x0B50,
GL_LIGHT_MODEL_LOCAL_VIEWER=0x0B51,
GL_LIGHT_MODEL_TWO_SIDE=0x0B52,
GL_LIGHT_MODEL_AMBIENT=0x0B53,
GL_SHADE_MODEL=0x0B54,
GL_COLOR_MATERIAL_FACE=0x0B55,
GL_COLOR_MATERIAL_PARAMETER=0x0B56,
GL_COLOR_MATERIAL=0x0B57,
GL_FOG=0x0B60,
GL_FOG_INDEX=0x0B61,
GL_FOG_DENSITY=0x0B62,
GL_FOG_START=0x0B63,
GL_FOG_END=0x0B64,
GL_FOG_MODE=0x0B65,
GL_FOG_COLOR=0x0B66,
GL_DEPTH_RANGE=0x0B70,
GL_DEPTH_TEST=0x0B71,
GL_DEPTH_WRITEMASK=0x0B72,
GL_DEPTH_CLEAR_VALUE=0x0B73,
GL_DEPTH_FUNC=0x0B74,
GL_ACCUM_CLEAR_VALUE=0x0B80,
GL_STENCIL_TEST=0x0B90,
GL_STENCIL_CLEAR_VALUE=0x0B91,
GL_STENCIL_FUNC=0x0B92,
GL_STENCIL_VALUE_MASK=0x0B93,
GL_STENCIL_FAIL=0x0B94,
GL_STENCIL_PASS_DEPTH_FAIL=0x0B95,
GL_STENCIL_PASS_DEPTH_PASS=0x0B96,
GL_STENCIL_REF=0x0B97,
GL_STENCIL_WRITEMASK=0x0B98,
GL_MATRIX_MODE=0x0BA0,
GL_NORMALIZE=0x0BA1,
GL_VIEWPORT=0x0BA2,
GL_MODELVIEW_STACK_DEPTH=0x0BA3,
GL_PROJECTION_STACK_DEPTH=0x0BA4,
GL_TEXTURE_STACK_DEPTH=0x0BA5,
GL_MODELVIEW_MATRIX=0x0BA6,
GL_PROJECTION_MATRIX=0x0BA7,
GL_TEXTURE_MATRIX=0x0BA8,
GL_ATTRIB_STACK_DEPTH=0x0BB0,
GL_CLIENT_ATTRIB_STACK_DEPTH=0x0BB1,
GL_ALPHA_TEST=0x0BC0,
GL_ALPHA_TEST_FUNC=0x0BC1,
GL_ALPHA_TEST_REF=0x0BC2,
GL_DITHER=0x0BD0,
GL_BLEND_DST=0x0BE0,
GL_BLEND_SRC=0x0BE1,
GL_BLEND=0x0BE2,
GL_LOGIC_OP_MODE=0x0BF0,
GL_INDEX_LOGIC_OP=0x0BF1,
GL_COLOR_LOGIC_OP=0x0BF2,
GL_AUX_BUFFERS=0x0C00,
GL_DRAW_BUFFER=0x0C01,
GL_READ_BUFFER=0x0C02,
GL_SCISSOR_BOX=0x0C10,
GL_SCISSOR_TEST=0x0C11,
GL_INDEX_CLEAR_VALUE=0x0C20,
GL_INDEX_WRITEMASK=0x0C21,
GL_COLOR_CLEAR_VALUE=0x0C22,
GL_COLOR_WRITEMASK=0x0C23,
GL_INDEX_MODE=0x0C30,
GL_RGBA_MODE=0x0C31,
GL_DOUBLEBUFFER=0x0C32,
GL_STEREO=0x0C33,
GL_RENDER_MODE=0x0C40,
GL_PERSPECTIVE_CORRECTION_HINT=0x0C50,
GL_POINT_SMOOTH_HINT=0x0C51,
GL_LINE_SMOOTH_HINT=0x0C52,
GL_POLYGON_SMOOTH_HINT=0x0C53,
GL_FOG_HINT=0x0C54,
GL_TEXTURE_GEN_S=0x0C60,
GL_TEXTURE_GEN_T=0x0C61,
GL_TEXTURE_GEN_R=0x0C62,
GL_TEXTURE_GEN_Q=0x0C63,
GL_PIXEL_MAP_I_TO_I=0x0C70,
GL_PIXEL_MAP_S_TO_S=0x0C71,
GL_PIXEL_MAP_I_TO_R=0x0C72,
GL_PIXEL_MAP_I_TO_G=0x0C73,
GL_PIXEL_MAP_I_TO_B=0x0C74,
GL_PIXEL_MAP_I_TO_A=0x0C75,
GL_PIXEL_MAP_R_TO_R=0x0C76,
GL_PIXEL_MAP_G_TO_G=0x0C77,
GL_PIXEL_MAP_B_TO_B=0x0C78,
GL_PIXEL_MAP_A_TO_A=0x0C79,
GL_PIXEL_MAP_I_TO_I_SIZE=0x0CB0,
GL_PIXEL_MAP_S_TO_S_SIZE=0x0CB1,
GL_PIXEL_MAP_I_TO_R_SIZE=0x0CB2,
GL_PIXEL_MAP_I_TO_G_SIZE=0x0CB3,
GL_PIXEL_MAP_I_TO_B_SIZE=0x0CB4,
GL_PIXEL_MAP_I_TO_A_SIZE=0x0CB5,
GL_PIXEL_MAP_R_TO_R_SIZE=0x0CB6,
GL_PIXEL_MAP_G_TO_G_SIZE=0x0CB7,
GL_PIXEL_MAP_B_TO_B_SIZE=0x0CB8,
GL_PIXEL_MAP_A_TO_A_SIZE=0x0CB9,
GL_UNPACK_SWAP_BYTES=0x0CF0,
GL_UNPACK_LSB_FIRST=0x0CF1,
GL_UNPACK_ROW_LENGTH=0x0CF2,
GL_UNPACK_SKIP_ROWS=0x0CF3,
GL_UNPACK_SKIP_PIXELS=0x0CF4,
GL_UNPACK_ALIGNMENT=0x0CF5,
GL_PACK_SWAP_BYTES=0x0D00,
GL_PACK_LSB_FIRST=0x0D01,
GL_PACK_ROW_LENGTH=0x0D02,
GL_PACK_SKIP_ROWS=0x0D03,
GL_PACK_SKIP_PIXELS=0x0D04,
GL_PACK_ALIGNMENT=0x0D05,
GL_MAP_COLOR=0x0D10,
GL_MAP_STENCIL=0x0D11,
GL_INDEX_SHIFT=0x0D12,
GL_INDEX_OFFSET=0x0D13,
GL_RED_SCALE=0x0D14,
GL_RED_BIAS=0x0D15,
GL_ZOOM_X=0x0D16,
GL_ZOOM_Y=0x0D17,
GL_GREEN_SCALE=0x0D18,
GL_GREEN_BIAS=0x0D19,
GL_BLUE_SCALE=0x0D1A,
GL_BLUE_BIAS=0x0D1B,
GL_ALPHA_SCALE=0x0D1C,
GL_ALPHA_BIAS=0x0D1D,
GL_DEPTH_SCALE=0x0D1E,
GL_DEPTH_BIAS=0x0D1F,
GL_MAX_EVAL_ORDER=0x0D30,
GL_MAX_LIGHTS=0x0D31,
GL_MAX_CLIP_PLANES=0x0D32,
GL_MAX_TEXTURE_SIZE=0x0D33,
GL_MAX_PIXEL_MAP_TABLE=0x0D34,
GL_MAX_ATTRIB_STACK_DEPTH=0x0D35,
GL_MAX_MODELVIEW_STACK_DEPTH=0x0D36,
GL_MAX_NAME_STACK_DEPTH=0x0D37,
GL_MAX_PROJECTION_STACK_DEPTH=0x0D38,
GL_MAX_TEXTURE_STACK_DEPTH=0x0D39,
GL_MAX_VIEWPORT_DIMS=0x0D3A,
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH=0x0D3B,
GL_SUBPIXEL_BITS=0x0D50,
GL_INDEX_BITS=0x0D51,
GL_RED_BITS=0x0D52,
GL_GREEN_BITS=0x0D53,
GL_BLUE_BITS=0x0D54,
GL_ALPHA_BITS=0x0D55,
GL_DEPTH_BITS=0x0D56,
GL_STENCIL_BITS=0x0D57,
GL_ACCUM_RED_BITS=0x0D58,
GL_ACCUM_GREEN_BITS=0x0D59,
GL_ACCUM_BLUE_BITS=0x0D5A,
GL_ACCUM_ALPHA_BITS=0x0D5B,
GL_NAME_STACK_DEPTH=0x0D70,
GL_AUTO_NORMAL=0x0D80,
GL_MAP1_COLOR_4=0x0D90,
GL_MAP1_INDEX=0x0D91,
GL_MAP1_NORMAL=0x0D92,
GL_MAP1_TEXTURE_COORD_1=0x0D93,
GL_MAP1_TEXTURE_COORD_2=0x0D94,
GL_MAP1_TEXTURE_COORD_3=0x0D95,
GL_MAP1_TEXTURE_COORD_4=0x0D96,
GL_MAP1_VERTEX_3=0x0D97,
GL_MAP1_VERTEX_4=0x0D98,
GL_MAP2_COLOR_4=0x0DB0,
GL_MAP2_INDEX=0x0DB1,
GL_MAP2_NORMAL=0x0DB2,
GL_MAP2_TEXTURE_COORD_1=0x0DB3,
GL_MAP2_TEXTURE_COORD_2=0x0DB4,
GL_MAP2_TEXTURE_COORD_3=0x0DB5,
GL_MAP2_TEXTURE_COORD_4=0x0DB6,
GL_MAP2_VERTEX_3=0x0DB7,
GL_MAP2_VERTEX_4=0x0DB8,
GL_MAP1_GRID_DOMAIN=0x0DD0,
GL_MAP1_GRID_SEGMENTS=0x0DD1,
GL_MAP2_GRID_DOMAIN=0x0DD2,
GL_MAP2_GRID_SEGMENTS=0x0DD3,
GL_TEXTURE_1D=0x0DE0,
GL_TEXTURE_2D=0x0DE1,
GL_FEEDBACK_BUFFER_POINTER=0x0DF0,
GL_FEEDBACK_BUFFER_SIZE=0x0DF1,
GL_FEEDBACK_BUFFER_TYPE=0x0DF2,
GL_SELECTION_BUFFER_POINTER=0x0DF3,
GL_SELECTION_BUFFER_SIZE=0x0DF4,
GL_TEXTURE_WIDTH=0x1000,
GL_TEXTURE_HEIGHT=0x1001,
GL_TEXTURE_INTERNAL_FORMAT=0x1003,
GL_TEXTURE_BORDER_COLOR=0x1004,
GL_TEXTURE_BORDER=0x1005,
GL_DONT_CARE=0x1100,
GL_FASTEST=0x1101,
GL_NICEST=0x1102,
GL_LIGHT0=0x4000,
GL_LIGHT1=0x4001,
GL_LIGHT2=0x4002,
GL_LIGHT3=0x4003,
GL_LIGHT4=0x4004,
GL_LIGHT5=0x4005,
GL_LIGHT6=0x4006,
GL_LIGHT7=0x4007,
GL_AMBIENT=0x1200,
GL_DIFFUSE=0x1201,
GL_SPECULAR=0x1202,
GL_POSITION=0x1203,
GL_SPOT_DIRECTION=0x1204,
GL_SPOT_EXPONENT=0x1205,
GL_SPOT_CUTOFF=0x1206,
GL_CONSTANT_ATTENUATION=0x1207,
GL_LINEAR_ATTENUATION=0x1208,
GL_QUADRATIC_ATTENUATION=0x1209,
GL_COMPILE=0x1300,
GL_COMPILE_AND_EXECUTE=0x1301,
GL_CLEAR=0x1500,
GL_AND=0x1501,
GL_AND_REVERSE=0x1502,
GL_COPY=0x1503,
GL_AND_INVERTED=0x1504,
GL_NOOP=0x1505,
GL_XOR=0x1506,
GL_OR=0x1507,
GL_NOR=0x1508,
GL_EQUIV=0x1509,
GL_INVERT=0x150A,
GL_OR_REVERSE=0x150B,
GL_COPY_INVERTED=0x150C,
GL_OR_INVERTED=0x150D,
GL_NAND=0x150E,
GL_SET=0x150F,
GL_EMISSION=0x1600,
GL_SHININESS=0x1601,
GL_AMBIENT_AND_DIFFUSE=0x1602,
GL_COLOR_INDEXES=0x1603,
GL_MODELVIEW=0x1700,
GL_PROJECTION=0x1701,
GL_TEXTURE=0x1702,
GL_COLOR=0x1800,
GL_DEPTH=0x1801,
GL_STENCIL=0x1802,
GL_COLOR_INDEX=0x1900,
GL_STENCIL_INDEX=0x1901,
GL_DEPTH_COMPONENT=0x1902,
GL_RED=0x1903,
GL_GREEN=0x1904,
GL_BLUE=0x1905,
GL_ALPHA=0x1906,
GL_RGB=0x1907,
GL_RGBA=0x1908,
GL_LUMINANCE=0x1909,
GL_LUMINANCE_ALPHA=0x190A,
GL_BITMAP=0x1A00,
GL_POINT=0x1B00,
GL_LINE=0x1B01,
GL_FILL=0x1B02,
GL_RENDER=0x1C00,
GL_FEEDBACK=0x1C01,
GL_SELECT=0x1C02,
GL_FLAT=0x1D00,
GL_SMOOTH=0x1D01,
GL_KEEP=0x1E00,
GL_REPLACE=0x1E01,
GL_INCR=0x1E02,
GL_DECR=0x1E03,
GL_VENDOR=0x1F00,
GL_RENDERER=0x1F01,
GL_VERSION=0x1F02,
GL_EXTENSIONS=0x1F03,
GL_S=0x2000,
GL_T=0x2001,
GL_R=0x2002,
GL_Q=0x2003,
GL_MODULATE=0x2100,
GL_DECAL=0x2101,
GL_TEXTURE_ENV_MODE=0x2200,
GL_TEXTURE_ENV_COLOR=0x2201,
GL_TEXTURE_ENV=0x2300,
GL_EYE_LINEAR=0x2400,
GL_OBJECT_LINEAR=0x2401,
GL_SPHERE_MAP=0x2402,
GL_TEXTURE_GEN_MODE=0x2500,
GL_OBJECT_PLANE=0x2501,
GL_EYE_PLANE=0x2502,
GL_NEAREST=0x2600,
GL_LINEAR=0x2601,
GL_NEAREST_MIPMAP_NEAREST=0x2700,
GL_LINEAR_MIPMAP_NEAREST=0x2701,
GL_NEAREST_MIPMAP_LINEAR=0x2702,
GL_LINEAR_MIPMAP_LINEAR=0x2703,
GL_TEXTURE_MAG_FILTER=0x2800,
GL_TEXTURE_MIN_FILTER=0x2801,
GL_TEXTURE_WRAP_S=0x2802,
GL_TEXTURE_WRAP_T=0x2803,
GL_CLAMP=0x2900,
GL_REPEAT=0x2901,
GL_CLIENT_PIXEL_STORE_BIT=0x00000001,
GL_CLIENT_VERTEX_ARRAY_BIT=0x00000002,
GL_CLIENT_ALL_ATTRIB_BITS=0xffffffff,
GL_POLYGON_OFFSET_FACTOR=0x8038,
GL_POLYGON_OFFSET_UNITS=0x2A00,
GL_POLYGON_OFFSET_POINT=0x2A01,
GL_POLYGON_OFFSET_LINE=0x2A02,
GL_POLYGON_OFFSET_FILL=0x8037,
GL_ALPHA4=0x803B,
GL_ALPHA8=0x803C,
GL_ALPHA12=0x803D,
GL_ALPHA16=0x803E,
GL_LUMINANCE4=0x803F,
GL_LUMINANCE8=0x8040,
GL_LUMINANCE12=0x8041,
GL_LUMINANCE16=0x8042,
GL_LUMINANCE4_ALPHA4=0x8043,
GL_LUMINANCE6_ALPHA2=0x8044,
GL_LUMINANCE8_ALPHA8=0x8045,
GL_LUMINANCE12_ALPHA4=0x8046,
GL_LUMINANCE12_ALPHA12=0x8047,
GL_LUMINANCE16_ALPHA16=0x8048,
GL_INTENSITY=0x8049,
GL_INTENSITY4=0x804A,
GL_INTENSITY8=0x804B,
GL_INTENSITY12=0x804C,
GL_INTENSITY16=0x804D,
GL_R3_G3_B2=0x2A10,
GL_RGB4=0x804F,
GL_RGB5=0x8050,
GL_RGB8=0x8051,
GL_RGB10=0x8052,
GL_RGB12=0x8053,
GL_RGB16=0x8054,
GL_RGBA2=0x8055,
GL_RGBA4=0x8056,
GL_RGB5_A1=0x8057,
GL_RGBA8=0x8058,
GL_RGB10_A2=0x8059,
GL_RGBA12=0x805A,
GL_RGBA16=0x805B,
GL_TEXTURE_RED_SIZE=0x805C,
GL_TEXTURE_GREEN_SIZE=0x805D,
GL_TEXTURE_BLUE_SIZE=0x805E,
GL_TEXTURE_ALPHA_SIZE=0x805F,
GL_TEXTURE_LUMINANCE_SIZE=0x8060,
GL_TEXTURE_INTENSITY_SIZE=0x8061,
GL_PROXY_TEXTURE_1D=0x8063,
GL_PROXY_TEXTURE_2D=0x8064,
GL_TEXTURE_PRIORITY=0x8066,
GL_TEXTURE_RESIDENT=0x8067,
GL_TEXTURE_BINDING_1D=0x8068,
GL_TEXTURE_BINDING_2D=0x8069,
GL_VERTEX_ARRAY=0x8074,
GL_NORMAL_ARRAY=0x8075,
GL_COLOR_ARRAY=0x8076,
GL_INDEX_ARRAY=0x8077,
GL_TEXTURE_COORD_ARRAY=0x8078,
GL_EDGE_FLAG_ARRAY=0x8079,
GL_VERTEX_ARRAY_SIZE=0x807A,
GL_VERTEX_ARRAY_TYPE=0x807B,
GL_VERTEX_ARRAY_STRIDE=0x807C,
GL_NORMAL_ARRAY_TYPE=0x807E,
GL_NORMAL_ARRAY_STRIDE=0x807F,
GL_COLOR_ARRAY_SIZE=0x8081,
GL_COLOR_ARRAY_TYPE=0x8082,
GL_COLOR_ARRAY_STRIDE=0x8083,
GL_INDEX_ARRAY_TYPE=0x8085,
GL_INDEX_ARRAY_STRIDE=0x8086,
GL_TEXTURE_COORD_ARRAY_SIZE=0x8088,
GL_TEXTURE_COORD_ARRAY_TYPE=0x8089,
GL_TEXTURE_COORD_ARRAY_STRIDE=0x808A,
GL_EDGE_FLAG_ARRAY_STRIDE=0x808C,
GL_VERTEX_ARRAY_POINTER=0x808E,
GL_NORMAL_ARRAY_POINTER=0x808F,
GL_COLOR_ARRAY_POINTER=0x8090,
GL_INDEX_ARRAY_POINTER=0x8091,
GL_TEXTURE_COORD_ARRAY_POINTER=0x8092,
GL_EDGE_FLAG_ARRAY_POINTER=0x8093,
GL_V2F=0x2A20,
GL_V3F=0x2A21,
GL_C4UB_V2F=0x2A22,
GL_C4UB_V3F=0x2A23,
GL_C3F_V3F=0x2A24,
GL_N3F_V3F=0x2A25,
GL_C4F_N3F_V3F=0x2A26,
GL_T2F_V3F=0x2A27,
GL_T4F_V4F=0x2A28,
GL_T2F_C4UB_V3F=0x2A29,
GL_T2F_C3F_V3F=0x2A2A,
GL_T2F_N3F_V3F=0x2A2B,
GL_T2F_C4F_N3F_V3F=0x2A2C,
GL_T4F_C4F_N3F_V4F=0x2A2D
}
native void glAccum(GLenum,GLfloat);
native void glAlphaFunc(GLenum,GLclampf);
native GLboolean glAreTexturesResident(GLsizei,const GLuint*,GLboolean*);
native void glArrayElement(GLint);
native void glBegin(GLenum);
native void glBindTexture(GLenum,GLuint);
native void glBitmap(GLsizei,GLsizei,GLfloat,GLfloat,GLfloat,GLfloat,const GLubyte*);
native void glBlendFunc(GLenum,GLenum);
native void glCallList(GLuint);
native void glCallLists(GLsizei,GLenum,const GLvoid*);
native void glClear(GLbitfield);
native void glClearAccum(GLfloat,GLfloat,GLfloat,GLfloat);
native void glClearColor(GLclampf,GLclampf,GLclampf,GLclampf);
native void glClearDepth(GLclampd);
native void glClearIndex(GLfloat);
native void glClearStencil(GLint);
native void glClipPlane(GLenum,const GLdouble*);
native void glColor3b(GLbyte,GLbyte,GLbyte);
native void glColor3bv(const GLbyte*);
native void glColor3d(GLdouble,GLdouble,GLdouble);
native void glColor3dv(const GLdouble*);
native void glColor3f(GLfloat,GLfloat,GLfloat);
native void glColor3fv(const GLfloat*);
native void glColor3i(GLint,GLint,GLint);
native void glColor3iv(const GLint*);
native void glColor3s(GLshort,GLshort,GLshort);
native void glColor3sv(const GLshort*);
native void glColor3ub(GLubyte,GLubyte,GLubyte);
native void glColor3ubv(const GLubyte*);
native void glColor3ui(GLuint,GLuint,GLuint);
native void glColor3uiv(const GLuint*);
native void glColor3us(GLushort,GLushort,GLushort);
native void glColor3usv(const GLushort*);
native void glColor4b(GLbyte,GLbyte,GLbyte,GLbyte);
native void glColor4bv(const GLbyte*);
native void glColor4d(GLdouble,GLdouble,GLdouble,GLdouble);
native void glColor4dv(const GLdouble*);
native void glColor4f(GLfloat,GLfloat,GLfloat,GLfloat);
native void glColor4fv(const GLfloat*);
native void glColor4i(GLint,GLint,GLint,GLint);
native void glColor4iv(const GLint*);
native void glColor4s(GLshort,GLshort,GLshort,GLshort);
native void glColor4sv(const GLshort*);
native void glColor4ub(GLubyte,GLubyte,GLubyte,GLubyte);
native void glColor4ubv(const GLubyte*);
native void glColor4ui(GLuint,GLuint,GLuint,GLuint);
native void glColor4uiv(const GLuint*);
native void glColor4us(GLushort,GLushort,GLushort,GLushort);
native void glColor4usv(const GLushort*);
native void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
native void glColorMaterial(GLenum,GLenum);
native void glColorPointer(GLint,GLenum,GLsizei,const GLvoid*);
native void glCopyPixels(GLint,GLint,GLsizei,GLsizei,GLenum);
native void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
native void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
native void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
native void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
native void glCullFace(GLenum);
native void glDeleteLists(GLuint,GLsizei);
native void glDeleteTextures(GLsizei,const GLuint*);
native void glDepthFunc(GLenum);
native void glDepthMask(GLboolean);
native void glDepthRange(GLclampd,GLclampd);
native void glDisable(GLenum);
native void glDisableClientState(GLenum);
native void glDrawArrays(GLenum,GLint,GLsizei);
native void glDrawBuffer(GLenum);
native void glDrawElements(GLenum,GLsizei,GLenum,const GLvoid*);
native void glDrawPixels(GLsizei,GLsizei,GLenum,GLenum,const GLvoid*);
native void glEdgeFlag(GLboolean);
native void glEdgeFlagPointer(GLsizei,const GLvoid*);
native void glEdgeFlagv(const GLboolean*);
native void glEnable(GLenum);
native void glEnableClientState(GLenum);
native void glEnd();
native void glEndList();
native void glEvalCoord1d(GLdouble);
native void glEvalCoord1dv(const GLdouble*);
native void glEvalCoord1f(GLfloat);
native void glEvalCoord1fv(const GLfloat*);
native void glEvalCoord2d(GLdouble,GLdouble);
native void glEvalCoord2dv(const GLdouble*);
native void glEvalCoord2f(GLfloat,GLfloat);
native void glEvalCoord2fv(const GLfloat*);
native void glEvalMesh1(GLenum,GLint,GLint);
native void glEvalMesh2(GLenum,GLint,GLint,GLint,GLint);
native void glEvalPoint1(GLint);
native void glEvalPoint2(GLint,GLint);
native void glFeedbackBuffer(GLsizei,GLenum,GLfloat*);
native void glFinish();
native void glFlush();
native void glFogf(GLenum,GLfloat);
native void glFogfv(GLenum,const GLfloat*);
native void glFogi(GLenum,GLint);
native void glFogiv(GLenum,const GLint*);
native void glFrontFace(GLenum);
native void glFrustum(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
native GLuint glGenLists(GLsizei);
native void glGenTextures(GLsizei,GLuint*);
native void glGetBooleanv(GLenum,GLboolean*);
native void glGetClipPlane(GLenum,GLdouble*);
native void glGetDoublev(GLenum,GLdouble*);
native GLenum glGetError();
native void glGetFloatv(GLenum,GLfloat*);
native void glGetIntegerv(GLenum,GLint*);
native void glGetLightfv(GLenum,GLenum,GLfloat*);
native void glGetLightiv(GLenum,GLenum,GLint*);
native void glGetMapdv(GLenum,GLenum,GLdouble*);
native void glGetMapfv(GLenum,GLenum,GLfloat*);
native void glGetMapiv(GLenum,GLenum,GLint*);
native void glGetMaterialfv(GLenum,GLenum,GLfloat*);
native void glGetMaterialiv(GLenum,GLenum,GLint*);
native void glGetPixelMapfv(GLenum,GLfloat*);
native void glGetPixelMapuiv(GLenum,GLuint*);
native void glGetPixelMapusv(GLenum,GLushort*);
native void glGetPointerv(GLenum,GLvoid**);
native void glGetPolygonStipple(GLubyte*);
native const GLubyte* glGetString(GLenum);
native void glGetTexEnvfv(GLenum,GLenum,GLfloat*);
native void glGetTexEnviv(GLenum,GLenum,GLint*);
native void glGetTexGendv(GLenum,GLenum,GLdouble*);
native void glGetTexGenfv(GLenum,GLenum,GLfloat*);
native void glGetTexGeniv(GLenum,GLenum,GLint*);
native void glGetTexImage(GLenum,GLint,GLenum,GLenum,GLvoid*);
native void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat*);
native void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint*);
native void glGetTexParameterfv(GLenum,GLenum,GLfloat*);
native void glGetTexParameteriv(GLenum,GLenum,GLint*);
native void glHint(GLenum,GLenum);
native void glIndexMask(GLuint);
native void glIndexPointer(GLenum,GLsizei,const GLvoid*);
native void glIndexd(GLdouble);
native void glIndexdv(const GLdouble*);
native void glIndexf(GLfloat);
native void glIndexfv(const GLfloat*);
native void glIndexi(GLint);
native void glIndexiv(const GLint*);
native void glIndexs(GLshort);
native void glIndexsv(const GLshort*);
native void glIndexub(GLubyte);
native void glIndexubv(const GLubyte*);
native void glInitNames();
native void glInterleavedArrays(GLenum,GLsizei,const GLvoid*);
native GLboolean glIsEnabled(GLenum);
native GLboolean glIsList(GLuint);
native GLboolean glIsTexture(GLuint);
native void glLightModelf(GLenum,GLfloat);
native void glLightModelfv(GLenum,const GLfloat*);
native void glLightModeli(GLenum,GLint);
native void glLightModeliv(GLenum,const GLint*);
native void glLightf(GLenum,GLenum,GLfloat);
native void glLightfv(GLenum,GLenum,const GLfloat*);
native void glLighti(GLenum,GLenum,GLint);
native void glLightiv(GLenum,GLenum,const GLint*);
native void glLineStipple(GLint,GLushort);
native void glLineWidth(GLfloat);
native void glListBase(GLuint);
native void glLoadIdentity();
native void glLoadMatrixd(const GLdouble*);
native void glLoadMatrixf(const GLfloat*);
native void glLoadName(GLuint);
native void glLogicOp(GLenum);
native void glMap1d(GLenum,GLdouble,GLdouble,GLint,GLint,const GLdouble*);
native void glMap1f(GLenum,GLfloat,GLfloat,GLint,GLint,const GLfloat*);
native void glMap2d(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble*);
native void glMap2f(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat*);
native void glMapGrid1d(GLint,GLdouble,GLdouble);
native void glMapGrid1f(GLint,GLfloat,GLfloat);
native void glMapGrid2d(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
native void glMapGrid2f(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
native void glMaterialf(GLenum,GLenum,GLfloat);
native void glMaterialfv(GLenum,GLenum,const GLfloat*);
native void glMateriali(GLenum,GLenum,GLint);
native void glMaterialiv(GLenum,GLenum,const GLint*);
native void glMatrixMode(GLenum);
native void glMultMatrixd(const GLdouble*);
native void glMultMatrixf(const GLfloat*);
native void glNewList(GLuint,GLenum);
native void glNormal3b(GLbyte,GLbyte,GLbyte);
native void glNormal3bv(const GLbyte*);
native void glNormal3d(GLdouble,GLdouble,GLdouble);
native void glNormal3dv(const GLdouble*);
native void glNormal3f(GLfloat,GLfloat,GLfloat);
native void glNormal3fv(const GLfloat*);
native void glNormal3i(GLint,GLint,GLint);
native void glNormal3iv(const GLint*);
native void glNormal3s(GLshort,GLshort,GLshort);
native void glNormal3sv(const GLshort*);
native void glNormalPointer(GLenum,GLsizei,const GLvoid*);
native void glOrtho(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
native void glPassThrough(GLfloat);
native void glPixelMapfv(GLenum,GLsizei,const GLfloat*);
native void glPixelMapuiv(GLenum,GLsizei,const GLuint*);
native void glPixelMapusv(GLenum,GLsizei,const GLushort*);
native void glPixelStoref(GLenum,GLfloat);
native void glPixelStorei(GLenum,GLint);
native void glPixelTransferf(GLenum,GLfloat);
native void glPixelTransferi(GLenum,GLint);
native void glPixelZoom(GLfloat,GLfloat);
native void glPointSize(GLfloat);
native void glPolygonMode(GLenum,GLenum);
native void glPolygonOffset(GLfloat,GLfloat);
native void glPolygonStipple(const GLubyte*);
native void glPopAttrib();
native void glPopClientAttrib();
native void glPopMatrix();
native void glPopName();
native void glPrioritizeTextures(GLsizei,const GLuint*,const GLclampf*);
native void glPushAttrib(GLbitfield);
native void glPushClientAttrib(GLbitfield);
native void glPushMatrix();
native void glPushName(GLuint);
native void glRasterPos2d(GLdouble,GLdouble);
native void glRasterPos2dv(const GLdouble*);
native void glRasterPos2f(GLfloat,GLfloat);
native void glRasterPos2fv(const GLfloat*);
native void glRasterPos2i(GLint,GLint);
native void glRasterPos2iv(const GLint*);
native void glRasterPos2s(GLshort,GLshort);
native void glRasterPos2sv(const GLshort*);
native void glRasterPos3d(GLdouble,GLdouble,GLdouble);
native void glRasterPos3dv(const GLdouble*);
native void glRasterPos3f(GLfloat,GLfloat,GLfloat);
native void glRasterPos3fv(const GLfloat*);
native void glRasterPos3i(GLint,GLint,GLint);
native void glRasterPos3iv(const GLint*);
native void glRasterPos3s(GLshort,GLshort,GLshort);
native void glRasterPos3sv(const GLshort*);
native void glRasterPos4d(GLdouble,GLdouble,GLdouble,GLdouble);
native void glRasterPos4dv(const GLdouble*);
native void glRasterPos4f(GLfloat,GLfloat,GLfloat,GLfloat);
native void glRasterPos4fv(const GLfloat*);
native void glRasterPos4i(GLint,GLint,GLint,GLint);
native void glRasterPos4iv(const GLint*);
native void glRasterPos4s(GLshort,GLshort,GLshort,GLshort);
native void glRasterPos4sv(const GLshort*);
native void glReadBuffer(GLenum);
native void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLvoid*);
native void glRectd(GLdouble,GLdouble,GLdouble,GLdouble);
native void glRectdv(const GLdouble*,const GLdouble*);
native void glRectf(GLfloat,GLfloat,GLfloat,GLfloat);
native void glRectfv(const GLfloat*,const GLfloat*);
native void glRecti(GLint,GLint,GLint,GLint);
native void glRectiv(const GLint*,const GLint*);
native void glRects(GLshort,GLshort,GLshort,GLshort);
native void glRectsv(const GLshort*,const GLshort*);
native GLint glRenderMode(GLenum);
native void glRotated(GLdouble,GLdouble,GLdouble,GLdouble);
native void glRotatef(GLfloat,GLfloat,GLfloat,GLfloat);
native void glScaled(GLdouble,GLdouble,GLdouble);
native void glScalef(GLfloat,GLfloat,GLfloat);
native void glScissor(GLint,GLint,GLsizei,GLsizei);
native void glSelectBuffer(GLsizei,GLuint*);
native void glShadeModel(GLenum);
native void glStencilFunc(GLenum,GLint,GLuint);
native void glStencilMask(GLuint);
native void glStencilOp(GLenum,GLenum,GLenum);
native void glTexCoord1d(GLdouble);
native void glTexCoord1dv(const GLdouble*);
native void glTexCoord1f(GLfloat);
native void glTexCoord1fv(const GLfloat*);
native void glTexCoord1i(GLint);
native void glTexCoord1iv(const GLint*);
native void glTexCoord1s(GLshort);
native void glTexCoord1sv(const GLshort*);
native void glTexCoord2d(GLdouble,GLdouble);
native void glTexCoord2dv(const GLdouble*);
native void glTexCoord2f(GLfloat,GLfloat);
native void glTexCoord2fv(const GLfloat*);
native void glTexCoord2i(GLint,GLint);
native void glTexCoord2iv(const GLint*);
native void glTexCoord2s(GLshort,GLshort);
native void glTexCoord2sv(const GLshort*);
native void glTexCoord3d(GLdouble,GLdouble,GLdouble);
native void glTexCoord3dv(const GLdouble*);
native void glTexCoord3f(GLfloat,GLfloat,GLfloat);
native void glTexCoord3fv(const GLfloat*);
native void glTexCoord3i(GLint,GLint,GLint);
native void glTexCoord3iv(const GLint*);
native void glTexCoord3s(GLshort,GLshort,GLshort);
native void glTexCoord3sv(const GLshort*);
native void glTexCoord4d(GLdouble,GLdouble,GLdouble,GLdouble);
native void glTexCoord4dv(const GLdouble*);
native void glTexCoord4f(GLfloat,GLfloat,GLfloat,GLfloat);
native void glTexCoord4fv(const GLfloat*);
native void glTexCoord4i(GLint,GLint,GLint,GLint);
native void glTexCoord4iv(const GLint*);
native void glTexCoord4s(GLshort,GLshort,GLshort,GLshort);
native void glTexCoord4sv(const GLshort*);
native void glTexCoordPointer(GLint,GLenum,GLsizei,const GLvoid*);
native void glTexEnvf(GLenum,GLenum,GLfloat);
native void glTexEnvfv(GLenum,GLenum,const GLfloat*);
native void glTexEnvi(GLenum,GLenum,GLint);
native void glTexEnviv(GLenum,GLenum,const GLint*);
native void glTexGend(GLenum,GLenum,GLdouble);
native void glTexGendv(GLenum,GLenum,const GLdouble*);
native void glTexGenf(GLenum,GLenum,GLfloat);
native void glTexGenfv(GLenum,GLenum,const GLfloat*);
native void glTexGeni(GLenum,GLenum,GLint);
native void glTexGeniv(GLenum,GLenum,const GLint*);
native void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const GLvoid*);
native void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const GLvoid*);
native void glTexParameterf(GLenum,GLenum,GLfloat);
native void glTexParameterfv(GLenum,GLenum,const GLfloat*);
native void glTexParameteri(GLenum,GLenum,GLint);
native void glTexParameteriv(GLenum,GLenum,const GLint*);
native void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const GLvoid*);
native void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const GLvoid*);
native void glTranslated(GLdouble,GLdouble,GLdouble);
native void glTranslatef(GLfloat,GLfloat,GLfloat);
native void glVertex2d(GLdouble,GLdouble);
native void glVertex2dv(const GLdouble*);
native void glVertex2f(GLfloat,GLfloat);
native void glVertex2fv(const GLfloat*);
native void glVertex2i(GLint,GLint);
native void glVertex2iv(const GLint*);
native void glVertex2s(GLshort,GLshort);
native void glVertex2sv(const GLshort*);
native void glVertex3d(GLdouble,GLdouble,GLdouble);
native void glVertex3dv(const GLdouble*);
native void glVertex3f(GLfloat,GLfloat,GLfloat);
native void glVertex3fv(const GLfloat*);
native void glVertex3i(GLint,GLint,GLint);
native void glVertex3iv(const GLint*);
native void glVertex3s(GLshort,GLshort,GLshort);
native void glVertex3sv(const GLshort*);
native void glVertex4d(GLdouble,GLdouble,GLdouble,GLdouble);
native void glVertex4dv(const GLdouble*);
native void glVertex4f(GLfloat,GLfloat,GLfloat,GLfloat);
native void glVertex4fv(const GLfloat*);
native void glVertex4i(GLint,GLint,GLint,GLint);
native void glVertex4iv(const GLint*);
native void glVertex4s(GLshort,GLshort,GLshort,GLshort);
native void glVertex4sv(const GLshort*);
native void glVertexPointer(GLint,GLenum,GLsizei,const GLvoid*);
native void glViewport(GLint,GLint,GLsizei,GLsizei);

// OPENGL GLU GLUE

typedef void GLUnurbs;
typedef void GLUquadric;
typedef void GLUtesselator;

enum {
GLU_FALSE=0,
GLU_TRUE=1,
GLU_VERSION_1_1=1,
GLU_VERSION_1_2=1,
GLU_VERSION=100800,
GLU_EXTENSIONS=100801,
GLU_INVALID_ENUM=100900,
GLU_INVALID_VALUE=100901,
GLU_OUT_OF_MEMORY=100902,
GLU_INCOMPATIBLE_GL_VERSION=100903,
GLU_INVALID_OPERATION=100904,
GLU_OUTLINE_POLYGON=100240,
GLU_OUTLINE_PATCH=100241,
GLU_ERROR=100103,
GLU_NURBS_ERROR1=100251,
GLU_NURBS_ERROR2=100252,
GLU_NURBS_ERROR3=100253,
GLU_NURBS_ERROR4=100254,
GLU_NURBS_ERROR5=100255,
GLU_NURBS_ERROR6=100256,
GLU_NURBS_ERROR7=100257,
GLU_NURBS_ERROR8=100258,
GLU_NURBS_ERROR9=100259,
GLU_NURBS_ERROR10=100260,
GLU_NURBS_ERROR11=100261,
GLU_NURBS_ERROR12=100262,
GLU_NURBS_ERROR13=100263,
GLU_NURBS_ERROR14=100264,
GLU_NURBS_ERROR15=100265,
GLU_NURBS_ERROR16=100266,
GLU_NURBS_ERROR17=100267,
GLU_NURBS_ERROR18=100268,
GLU_NURBS_ERROR19=100269,
GLU_NURBS_ERROR20=100270,
GLU_NURBS_ERROR21=100271,
GLU_NURBS_ERROR22=100272,
GLU_NURBS_ERROR23=100273,
GLU_NURBS_ERROR24=100274,
GLU_NURBS_ERROR25=100275,
GLU_NURBS_ERROR26=100276,
GLU_NURBS_ERROR27=100277,
GLU_NURBS_ERROR28=100278,
GLU_NURBS_ERROR29=100279,
GLU_NURBS_ERROR30=100280,
GLU_NURBS_ERROR31=100281,
GLU_NURBS_ERROR32=100282,
GLU_NURBS_ERROR33=100283,
GLU_NURBS_ERROR34=100284,
GLU_NURBS_ERROR35=100285,
GLU_NURBS_ERROR36=100286,
GLU_NURBS_ERROR37=100287,
GLU_AUTO_LOAD_MATRIX=100200,
GLU_CULLING=100201,
GLU_SAMPLING_TOLERANCE=100203,
GLU_DISPLAY_MODE=100204,
GLU_PARAMETRIC_TOLERANCE=100202,
GLU_SAMPLING_METHOD=100205,
GLU_U_STEP=100206,
GLU_V_STEP=100207,
GLU_OBJECT_PARAMETRIC_ERROR_EXT=100208,
GLU_OBJECT_PATH_LENGTH_EXT=100209,
GLU_PATH_LENGTH=100215,
GLU_PARAMETRIC_ERROR=100216,
GLU_DOMAIN_DISTANCE=100217,
GLU_MAP1_TRIM_2=100210,
GLU_MAP1_TRIM_3=100211,
GLU_POINT=100010,
GLU_LINE=100011,
GLU_FILL=100012,
GLU_SILHOUETTE=100013,
GLU_SMOOTH=100000,
GLU_FLAT=100001,
GLU_NONE=100002,
GLU_OUTSIDE=100020,
GLU_INSIDE=100021,
GLU_TESS_BEGIN=100100,
GLU_BEGIN=100100,
GLU_TESS_VERTEX=100101,
GLU_VERTEX=100101,
GLU_TESS_END=100102,
GLU_END=100102,
GLU_TESS_ERROR=100103,
GLU_TESS_EDGE_FLAG=100104,
GLU_EDGE_FLAG=100104,
GLU_TESS_COMBINE=100105,
GLU_TESS_BEGIN_DATA=100106,
GLU_TESS_VERTEX_DATA=100107,
GLU_TESS_END_DATA=100108,
GLU_TESS_ERROR_DATA=100109,
GLU_TESS_EDGE_FLAG_DATA=100110,
GLU_TESS_COMBINE_DATA=100111,
GLU_NURBS_MODE_EXT=100160,
GLU_NURBS_TESSELLATOR_EXT=100161,
GLU_NURBS_RENDERER_EXT=100162,
GLU_NURBS_BEGIN_EXT=100164,
GLU_NURBS_VERTEX_EXT=100165,
GLU_NURBS_NORMAL_EXT=100166,
GLU_NURBS_COLOR_EXT=100167,
GLU_NURBS_TEX_COORD_EXT=100168,
GLU_NURBS_END_EXT=100169,
GLU_NURBS_BEGIN_DATA_EXT=100170,
GLU_NURBS_VERTEX_DATA_EXT=100171,
GLU_NURBS_NORMAL_DATA_EXT=100172,
GLU_NURBS_COLOR_DATA_EXT=100173,
GLU_NURBS_TEX_COORD_DATA_EXT=100174,
GLU_NURBS_END_DATA_EXT=100175,
GLU_CW=100120,
GLU_CCW=100121,
GLU_INTERIOR=100122,
GLU_EXTERIOR=100123,
GLU_UNKNOWN=100124,
GLU_TESS_WINDING_RULE=100140,
GLU_TESS_BOUNDARY_ONLY=100141,
GLU_TESS_TOLERANCE=100142,
GLU_TESS_ERROR1=100151,
GLU_TESS_ERROR2=100152,
GLU_TESS_ERROR3=100153,
GLU_TESS_ERROR4=100154,
GLU_TESS_ERROR5=100155,
GLU_TESS_ERROR6=100156,
GLU_TESS_ERROR7=100157,
GLU_TESS_ERROR8=100158,
GLU_TESS_MISSING_BEGIN_POLYGON=100151,
GLU_TESS_MISSING_BEGIN_CONTOUR=100152,
GLU_TESS_MISSING_END_POLYGON=100153,
GLU_TESS_MISSING_END_CONTOUR=100154,
GLU_TESS_COORD_TOO_LARGE=100155,
GLU_TESS_NEED_COMBINE_CALLBACK=100156,
GLU_TESS_WINDING_ODD=100130,
GLU_TESS_WINDING_NONZERO=100131,
GLU_TESS_WINDING_POSITIVE=100132,
GLU_TESS_WINDING_NEGATIVE=100133,
GLU_TESS_WINDING_ABS_GEQ_TWO=100134
}
native void gluBeginCurve(GLUnurbs*);
native void gluBeginPolygon(GLUtesselator*);
native void gluBeginSurface(GLUnurbs*);
native void gluBeginTrim(GLUnurbs*);
native GLint gluBuild1DMipmaps(GLenum,GLint,GLsizei,GLenum,GLenum,void*);
native GLint gluBuild2DMipmaps(GLenum,GLint,GLsizei,GLsizei,GLenum,GLenum,void*);
native void gluCylinder(GLUquadric*,GLdouble,GLdouble,GLdouble,GLint,GLint);
native void gluDeleteNurbsRenderer(GLUnurbs*);
native void gluDeleteQuadric(GLUquadric*);
native void gluDeleteTess(GLUtesselator*);
native void gluDisk(GLUquadric*,GLdouble,GLdouble,GLint,GLint);
native void gluEndCurve(GLUnurbs*);
native void gluEndPolygon(GLUtesselator*);
native void gluEndSurface(GLUnurbs*);
native void gluEndTrim(GLUnurbs*);
native const GLubyte* gluErrorString(GLenum);
native void gluGetNurbsProperty(GLUnurbs*,GLenum,GLfloat*);
native const GLubyte* gluGetString(GLenum);
native void gluGetTessProperty(GLUtesselator*,GLenum,GLdouble*);
native void gluLoadSamplingMatrices(GLUnurbs*,const GLfloat*,const GLfloat*,const GLint*);
native void gluLookAt(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
native GLUnurbs* gluNewNurbsRenderer();
native GLUquadric* gluNewQuadric();
native GLUtesselator* gluNewTess();
native void gluNextContour(GLUtesselator*,GLenum);
native void gluNurbsCurve(GLUnurbs*,GLint,GLfloat*,GLint,GLfloat*,GLint,GLenum);
native void gluNurbsProperty(GLUnurbs*,GLenum,GLfloat);
native void gluNurbsSurface(GLUnurbs*,GLint,GLfloat*,GLint,GLfloat*,GLint,GLint,GLfloat*,GLint,GLint,GLenum);
native void gluOrtho2D(GLdouble,GLdouble,GLdouble,GLdouble);
native void gluPartialDisk(GLUquadric*,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble);
native void gluPerspective(GLdouble,GLdouble,GLdouble,GLdouble);
native void gluPickMatrix(GLdouble,GLdouble,GLdouble,GLdouble,GLint*);
native GLint gluProject(GLdouble,GLdouble,GLdouble,const GLdouble*,const GLdouble*,const GLint*,GLdouble*,GLdouble*,GLdouble*);
native void gluPwlCurve(GLUnurbs*,GLint,GLfloat*,GLint,GLenum);
native void gluQuadricDrawStyle(GLUquadric*,GLenum);
native void gluQuadricNormals(GLUquadric*,GLenum);
native void gluQuadricOrientation(GLUquadric*,GLenum);
native void gluQuadricTexture(GLUquadric*,GLboolean);
native GLint gluScaleImage(GLenum,GLsizei,GLsizei,GLenum,void*,GLsizei,GLsizei,GLenum,GLvoid*);
native void gluSphere(GLUquadric*,GLdouble,GLint,GLint);
native void gluTessBeginContour(GLUtesselator*);
native void gluTessBeginPolygon(GLUtesselator*,GLvoid*);
native void gluTessEndContour(GLUtesselator*);
native void gluTessEndPolygon(GLUtesselator*);
native void gluTessNormal(GLUtesselator*,GLdouble,GLdouble,GLdouble);
native void gluTessProperty(GLUtesselator*,GLenum,GLdouble);
native void gluTessVertex(GLUtesselator*,GLdouble*,GLvoid*);
native GLint gluUnProject(GLdouble,GLdouble,GLdouble,const GLdouble*,const GLdouble*,const GLint*,GLdouble*,GLdouble*,GLdouble*);

// OPENGL GLUT GLUE

native void glutWireSphere(GLdouble radius, GLint slices, GLint stacks);
native void glutSolidSphere(GLdouble radius, GLint slices, GLint stacks);
native void glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);
native void glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);
native void glutWireCube(GLdouble size);
native void glutSolidCube(GLdouble size);
native void glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);
native void glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);
native void glutWireDodecahedron();
native void glutSolidDodecahedron();
native void glutWireTeapot(GLdouble size);
native void glutSolidTeapot(GLdouble size);
native void glutWireOctahedron();
native void glutSolidOctahedron();
native void glutWireTetrahedron();
native void glutSolidTetrahedron();
native void glutWireIcosahedron();
native void glutSolidIcosahedron();
