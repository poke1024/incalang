/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/incalang/incalang/development/source/packages/ariadne/compiler/grammars/lex.yy.cpp,v 1.1 2004/10/09 11:15:32 mabinogion123 Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	/* Whether we've seen an EOF on this buffer. */
	int yy_eof_status;
#define EOF_NOT_SEEN 0
	/* "Pending" happens when the EOF has been seen but there's still
	 * some text to process.  Note that when we actually see the EOF,
	 * we switch the status back to "not seen" (via yyrestart()), so
	 * that the user can continue scanning by just pointing yyin at
	 * a new input file.
	 */
#define EOF_PENDING 1
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
static void yy_push_state YY_PROTO(( int new_state ));
static void yy_pop_state YY_PROTO(( void ));
static int yy_top_state YY_PROTO(( void ));

#ifndef yytext_ptr
static void yy_flex_strcpy YY_PROTO(( char *, const char * ));
#endif

static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *ptr, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int yy_state_type;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char *yytext;
#define yytext_ptr yytext

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 107
static const short int yy_accept[291] =
    {   0,
        0,    0,  107,  105,  106,  103,  102,  100,  101,   99,
      104,  106,  106,   86,   91,  106,   80,   81,   84,   87,
       97,   88,   60,   85,   49,   49,   95,   98,   89,   96,
       90,   94,   45,   78,   79,   92,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   82,   93,   83,   64,    0,   54,    0,
       70,   65,   75,    0,    0,   68,   57,   71,   58,   72,
       59,   52,    1,    2,   69,   53,   48,    0,    0,   51,
       49,   49,    0,   49,   67,   56,   61,   63,   62,   55,
       45,   76,   45,   45,   45,   45,   45,   45,   45,   45,

       32,   45,   45,   45,   45,   45,   45,   45,   28,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   77,
       66,   50,    0,   52,   52,    0,   53,   48,   48,   47,
        0,   51,   46,   73,   74,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   33,
       45,   45,    9,   45,   45,   40,   44,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,    0,   52,    0,   52,    0,   53,
       47,   46,   45,    5,   45,   26,    6,   45,   45,   45,

       45,   45,   45,   29,   45,   45,   45,   45,   34,   10,
       45,   42,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   43,   15,   45,   45,   14,   45,   11,    0,   52,
       45,   36,   38,   19,   45,   45,   45,   45,   45,   16,
        8,   45,   45,   45,   45,   45,   45,   12,   45,   45,
       45,   45,   45,   45,   31,   45,   45,   45,   41,    7,
       45,   25,   20,   45,   45,   45,   37,    4,   13,   18,
       30,   45,   45,   45,   45,   27,   39,   45,   45,   22,
       17,   45,   21,   35,   23,   45,    3,   45,   24,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    3,    4,    5,
        2,    6,    7,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    8,    9,   10,    2,    2,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,    2,   30,   31,   30,   30,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   34,    2,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   34,   51,   52,   34,   53,
       54,   55,   34,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static const int yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    4,    4,    4,    4,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1
    } ;

static const short int yy_base[295] =
    {   0,
        0,    0,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  402,   58,  401,   57,  388,  431,  431,  399,   53,
      431,   54,   49,   58,   78,  121,  401,  431,   49,  397,
       50,  431,    0,  431,  431,  396,  379,   32,   41,   45,
       40,   52,  367,   65,  366,   74,   63,  373,   77,   40,
      365,  363,   82,  431,   80,  431,  431,   95,  431,  411,
      431,  431,  431,  110,  134,  431,  431,  431,  431,  431,
      431,  129,  431,  431,  431,  137,  170,  143,  177,  431,
      152,  162,    0,    0,  431,  388,  431,  431,  431,  387,
        0,  431,  356,  358,  365,  353,  367,  366,  354,   98,

      347,  348,  346,  351,  348,  345,  350,  341,    0,  340,
      344,  338,  334,  336,  341,  124,  349,  333,  336,   94,
      347,  338,  337,  327,  330,  327,  333,  332,  336,  431,
      431,  431,  190,  431,  201,  208,  431,  183,  202,  221,
      163,  217,  223,  431,  431,  322,  327,  336,  331,  320,
      318,  188,  332,  327,  329,  325,  324,  312,  326,    0,
      321,  312,    0,  317,  314,    0,    0,  311,  302,  303,
      308,  300,  302,  304,  310,  297,  296,  296,  306,  305,
      300,  304,  296,  301,  240,  243,  262,  431,  245,  264,
      253,  256,  290,    0,  294,    0,    0,  287,  285,  292,

      282,  282,  287,    0,  285,  291,  278,  282,    0,    0,
      274,    0,  287,  276,  271,  264,  261,  271,  260,  263,
      266,    0,    0,  264,  259,    0,  257,    0,  248,  271,
      260,    0,    0,    0,  248,  248,  252,  250,  238,    0,
        0,  232,  228,  214,  216,  211,  198,    0,  204,  194,
      188,  179,  180,  167,    0,  171,  151,  150,    0,    0,
      144,    0,    0,  149,  133,  158,    0,    0,    0,    0,
        0,  132,  131,  113,  117,    0,    0,  131,  102,  431,
        0,   91,    0,    0,  431,   84,    0,   93,  431,  431,
      323,  327,  329,   84

    } ;

static const short int yy_def[295] =
    {   0,
      290,    1,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  291,  290,  290,  292,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  293,  290,  290,  290,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  290,  290,  290,  290,  291,  290,  291,
      290,  290,  290,  292,  292,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  294,   26,  290,  290,  290,  290,  290,  290,
      293,  290,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  294,  290,  290,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  290,  290,  290,  290,  290,  290,
      290,  290,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  290,  290,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  290,
      293,  293,  293,  293,  290,  293,  293,  293,  290,    0,
      290,  290,  290,  290

    } ;

static const short int yy_nxt[499] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       33,   33,   33,   33,   33,   33,   33,   34,    5,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   33,   44,
       33,   45,   46,   33,   47,   48,   49,   50,   51,   52,
       53,   33,   33,   33,   54,   55,   56,   59,   62,   67,
       72,   72,   69,   73,   86,   87,   89,   90,   74,   68,
       70,   71,   96,   63,   75,   94,  143,   95,  123,   97,
      100,  102,   98,  104,   99,  124,   60,   76,  101,   77,

       77,  103,  125,  105,   59,  106,  130,  107,   78,   79,
       80,  109,   81,   82,   83,  112,  289,  110,  116,  113,
       78,  117,  132,   79,   80,  119,  120,  114,  288,   81,
      128,  129,  115,   60,  121,  287,   82,  122,  290,   83,
       76,  174,   84,   84,  153,  131,   64,  286,   65,  154,
       72,   72,   79,   80,  285,   81,   82,  175,  135,  135,
      133,  134,  284,  134,  140,  140,   79,   80,  136,  137,
      283,  137,   81,  169,  133,  134,  282,  170,  281,   82,
      134,  280,  136,  137,  142,  142,   82,   82,  137,   76,
      279,   77,   77,  141,  278,  141,   82,   82,  142,  142,

      277,   79,   80,   82,  138,  139,  185,  276,  185,  275,
       82,  186,  186,   82,  274,   79,   80,  139,  139,  273,
       82,  138,  135,  135,  189,  272,  189,  271,  139,  190,
      190,  270,  187,  188,  139,  188,  139,  139,  142,  142,
      269,  139,  140,  140,  199,  200,  187,  188,  268,   80,
      267,   80,  188,  139,  266,  191,  191,  192,  192,  265,
      139,  186,  186,   80,  186,  186,  190,  190,   80,  230,
      230,  264,  191,  263,  192,  134,  262,  134,  229,  191,
      229,  192,  261,  230,  230,  190,  190,  191,  191,  134,
      192,  192,  230,  230,  134,  260,  137,  259,  137,  258,

      257,  256,  255,  188,  191,  188,  254,  192,  253,  252,
      137,  191,  251,  250,  192,  137,  249,  188,  248,  247,
      246,  245,  188,   58,   58,   58,   58,   64,  244,   64,
       64,   91,   91,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  198,  197,  196,  195,  194,  193,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  173,
      172,  171,  168,  167,  166,  165,  164,  163,  162,  161,

      160,  159,  158,  157,  156,  155,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  290,  127,  126,  118,  111,
      108,   93,   92,   88,   85,   66,   65,   61,   57,  290,
        3,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290

    } ;

static const short int yy_chk[499] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   15,   20,
       23,   23,   22,   24,   29,   29,   31,   31,   24,   20,
       22,   22,   39,   15,   24,   38,  294,   38,   50,   39,
       40,   41,   39,   42,   39,   50,   13,   25,   40,   25,

       25,   41,   50,   42,   58,   42,   55,   42,   25,   25,
       25,   44,   25,   25,   25,   46,  288,   44,   47,   46,
       25,   47,   64,   25,   25,   49,   49,   46,  286,   25,
       53,   53,   46,   58,   49,  282,   25,   49,   65,   25,
       26,  120,   26,   26,  100,   55,   65,  279,   64,  100,
       72,   72,   26,   26,  278,   26,   26,  120,   76,   76,
       72,   72,  275,   72,   78,   78,   26,   26,   76,   76,
      274,   76,   26,  116,   72,   72,  273,  116,  272,   26,
       72,  266,   76,   76,  141,  141,   81,   81,   76,   77,
      265,   77,   77,   79,  264,   79,   82,   82,   79,   79,

      261,   77,   77,   81,   77,   77,  133,  258,  133,  257,
       81,  133,  133,   82,  256,   77,   77,  138,  138,  254,
       82,   77,  135,  135,  136,  253,  136,  252,   77,  136,
      136,  251,  135,  135,  138,  135,  139,  139,  142,  142,
      250,  138,  140,  140,  152,  152,  135,  135,  249,  142,
      247,  142,  135,  139,  246,  140,  140,  143,  143,  245,
      139,  185,  185,  142,  186,  186,  189,  189,  142,  229,
      229,  244,  140,  243,  143,  186,  242,  186,  187,  140,
      187,  143,  239,  187,  187,  190,  190,  191,  191,  186,
      192,  192,  230,  230,  186,  238,  190,  237,  190,  236,

      235,  231,  227,  230,  191,  230,  225,  192,  224,  221,
      190,  191,  220,  219,  192,  190,  218,  230,  217,  216,
      215,  214,  230,  291,  291,  291,  291,  292,  213,  292,
      292,  293,  293,  211,  208,  207,  206,  205,  203,  202,
      201,  200,  199,  198,  195,  193,  184,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  168,  165,  164,  162,  161,  159,  158,  157,
      156,  155,  154,  153,  151,  150,  149,  148,  147,  146,
      129,  128,  127,  126,  125,  124,  123,  122,  121,  119,
      118,  117,  115,  114,  113,  112,  111,  110,  108,  107,

      106,  105,  104,  103,  102,  101,   99,   98,   97,   96,
       95,   94,   93,   90,   86,   60,   52,   51,   48,   45,
       43,   37,   36,   30,   27,   19,   16,   14,   12,    3,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
# line 1 "compiler.l"
/* ------------------------------------------------------------------
   Initial code (copied verbatim to the output file)
   ------------------------------------------------------------------*/
# line 5 "compiler.l"

#include "xalloc.h"
#include "scope_t.h"
#include "type_t.h"
#include "expr_t.h"
#include "stmt_t.h"
#include "class_t.h"
#include "lexer.h"
#include "parser.h"
#include <cstring>

using namespace compiler;

#include "compiler_tab.h"

/* -----------------------------------------------------------------*/

void
c_comment();

void
cpp_comment();

void
extract_string_literal();

void
new_fileref();

/* -----------------------------------------------------------------*/

#define YY_INPUT(buf,result,max_size)\
	result = g_yystream->read_some_bytes( buf, max_size );\
	g_globalpos += max_size;
	
#define isatty(x) 0

/* -----------------------------------------------------------------*/

fileid_t				g_fileid = fileid_invalid;
s32						g_filepos = 0;
s32						g_globalpos = 0;
input_stream_t*			g_yystream = 0;

/* ------------------------------------------------------------------
   Some macros (standard regular expressions)
   ------------------------------------------------------------------*/
/* ------------------------------------------------------------------
   The lexer rules
   ------------------------------------------------------------------*/

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = getc( yyin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 75 "compiler.l"



	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 291 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 431 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
# line 77 "compiler.l"
{ c_comment(); }
	YY_BREAK
case 2:
YY_USER_ACTION
# line 78 "compiler.l"
{ cpp_comment(); }
	YY_BREAK
case 3:
YY_USER_ACTION
# line 80 "compiler.l"
{ return UNSIGNED; }
	YY_BREAK
case 4:
YY_USER_ACTION
# line 81 "compiler.l"
{ return SIGNED; }
	YY_BREAK
case 5:
YY_USER_ACTION
# line 82 "compiler.l"
{ return BOOL; }
	YY_BREAK
case 6:
YY_USER_ACTION
# line 83 "compiler.l"
{ return CHAR; }
	YY_BREAK
case 7:
YY_USER_ACTION
# line 84 "compiler.l"
{ return DOUBLE; }
	YY_BREAK
case 8:
YY_USER_ACTION
# line 85 "compiler.l"
{ return FLOAT; }
	YY_BREAK
case 9:
YY_USER_ACTION
# line 86 "compiler.l"
{ return INT; }
	YY_BREAK
case 10:
YY_USER_ACTION
# line 87 "compiler.l"
{ return LONG; }
	YY_BREAK
case 11:
YY_USER_ACTION
# line 88 "compiler.l"
{ return WIDE; }
	YY_BREAK
case 12:
YY_USER_ACTION
# line 89 "compiler.l"
{ return SHORT; }
	YY_BREAK
case 13:
YY_USER_ACTION
# line 90 "compiler.l"
{ return SIZEOF; }
	YY_BREAK
case 14:
YY_USER_ACTION
# line 91 "compiler.l"
{ return VOID; }
	YY_BREAK
case 15:
YY_USER_ACTION
# line 92 "compiler.l"
{ return TRUETOKEN; }
	YY_BREAK
case 16:
YY_USER_ACTION
# line 93 "compiler.l"
{ return FALSETOKEN; }
	YY_BREAK
case 17:
YY_USER_ACTION
# line 95 "compiler.l"
{ return TYPEDEF; }
	YY_BREAK
case 18:
YY_USER_ACTION
# line 96 "compiler.l"
{ return STATIC; }
	YY_BREAK
case 19:
YY_USER_ACTION
# line 97 "compiler.l"
{ return CONST; }
	YY_BREAK
case 20:
YY_USER_ACTION
# line 98 "compiler.l"
{ return NATIVE; }
	YY_BREAK
case 21:
YY_USER_ACTION
# line 99 "compiler.l"
{ return ABSTRACT; }
	YY_BREAK
case 22:
YY_USER_ACTION
# line 101 "compiler.l"
{ return PUBLIC; }
	YY_BREAK
case 23:
YY_USER_ACTION
# line 102 "compiler.l"
{ return PRIVATE; }
	YY_BREAK
case 24:
YY_USER_ACTION
# line 103 "compiler.l"
{ return PROTECTED; }
	YY_BREAK
case 25:
YY_USER_ACTION
# line 104 "compiler.l"
{ return FRIEND; }
	YY_BREAK
case 26:
YY_USER_ACTION
# line 106 "compiler.l"
{ return CASE; }
	YY_BREAK
case 27:
YY_USER_ACTION
# line 107 "compiler.l"
{ return DEFAULT; }
	YY_BREAK
case 28:
YY_USER_ACTION
# line 108 "compiler.l"
{ return IF; }
	YY_BREAK
case 29:
YY_USER_ACTION
# line 109 "compiler.l"
{ return ELSE; }
	YY_BREAK
case 30:
YY_USER_ACTION
# line 110 "compiler.l"
{ return SWITCH; }
	YY_BREAK
case 31:
YY_USER_ACTION
# line 111 "compiler.l"
{ return WHILE; }
	YY_BREAK
case 32:
YY_USER_ACTION
# line 112 "compiler.l"
{ return DO; }
	YY_BREAK
case 33:
YY_USER_ACTION
# line 113 "compiler.l"
{ return FOR; }
	YY_BREAK
case 34:
YY_USER_ACTION
# line 114 "compiler.l"
{ return GOTO; }
	YY_BREAK
case 35:
YY_USER_ACTION
# line 115 "compiler.l"
{ return CONTINUE; }
	YY_BREAK
case 36:
YY_USER_ACTION
# line 116 "compiler.l"
{ return BREAK; }
	YY_BREAK
case 37:
YY_USER_ACTION
# line 117 "compiler.l"
{ return RETURN; }
	YY_BREAK
case 38:
YY_USER_ACTION
# line 118 "compiler.l"
{ return CLASS; }
	YY_BREAK
case 39:
YY_USER_ACTION
# line 119 "compiler.l"
{ return EXTENDS; }
	YY_BREAK
case 40:
YY_USER_ACTION
# line 120 "compiler.l"
{ return NEW; }
	YY_BREAK
case 41:
YY_USER_ACTION
# line 121 "compiler.l"
{ return DELETE; }
	YY_BREAK
case 42:
YY_USER_ACTION
# line 122 "compiler.l"
{ return NULLTOKEN; }
	YY_BREAK
case 43:
YY_USER_ACTION
# line 123 "compiler.l"
{ return THISTOKEN; }
	YY_BREAK
case 44:
YY_USER_ACTION
# line 124 "compiler.l"
{ return NOT; }
	YY_BREAK
case 45:
YY_USER_ACTION
# line 126 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return IDENTIFIER; }
	YY_BREAK
case 46:
YY_USER_ACTION
# line 128 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return HEX_CONSTANT; }
	YY_BREAK
case 47:
YY_USER_ACTION
# line 129 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return BIN_CONSTANT; }
	YY_BREAK
case 48:
YY_USER_ACTION
# line 130 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return OCT_CONSTANT; }
	YY_BREAK
case 49:
YY_USER_ACTION
# line 131 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return INT_CONSTANT; }
	YY_BREAK
case 50:
YY_USER_ACTION
# line 132 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return CHR_CONSTANT; }
	YY_BREAK
case 51:
YY_USER_ACTION
# line 134 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return FLT_CONSTANT; }
	YY_BREAK
case 52:
YY_USER_ACTION
# line 135 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return FLT_CONSTANT; }
	YY_BREAK
case 53:
YY_USER_ACTION
# line 136 "compiler.l"
{ yylval.m_text = xstrdup( yytext ); return FLT_CONSTANT; }
	YY_BREAK
case 54:
YY_USER_ACTION
# line 139 "compiler.l"
{  extract_string_literal(); return STRING_LITERAL; }
	YY_BREAK
case 55:
YY_USER_ACTION
# line 142 "compiler.l"
{ return SHR_OP; }
	YY_BREAK
case 56:
YY_USER_ACTION
# line 143 "compiler.l"
{ return SHL_OP; }
	YY_BREAK
case 57:
YY_USER_ACTION
# line 144 "compiler.l"
{ return INC_OP; }
	YY_BREAK
case 58:
YY_USER_ACTION
# line 145 "compiler.l"
{ return DEC_OP; }
	YY_BREAK
case 59:
YY_USER_ACTION
# line 146 "compiler.l"
{ return PTR_OP; }
	YY_BREAK
case 60:
YY_USER_ACTION
# line 147 "compiler.l"
{ return '.'; };
	YY_BREAK
case 61:
YY_USER_ACTION
# line 148 "compiler.l"
{ return LE_OP; }
	YY_BREAK
case 62:
YY_USER_ACTION
# line 149 "compiler.l"
{ return GE_OP; }
	YY_BREAK
case 63:
YY_USER_ACTION
# line 150 "compiler.l"
{ return EQ_OP; }
	YY_BREAK
case 64:
YY_USER_ACTION
# line 151 "compiler.l"
{ return NE_OP; }
	YY_BREAK
case 65:
YY_USER_ACTION
# line 152 "compiler.l"
{ return AND_OP; }
	YY_BREAK
case 66:
YY_USER_ACTION
# line 153 "compiler.l"
{ return OR_OP; }
	YY_BREAK
case 67:
YY_USER_ACTION
# line 154 "compiler.l"
{ return SCOPE_OP; }
	YY_BREAK
case 68:
YY_USER_ACTION
# line 156 "compiler.l"
{ return MUL_ASSIGN; }
	YY_BREAK
case 69:
YY_USER_ACTION
# line 157 "compiler.l"
{ return DIV_ASSIGN; }
	YY_BREAK
case 70:
YY_USER_ACTION
# line 158 "compiler.l"
{ return MOD_ASSIGN; }
	YY_BREAK
case 71:
YY_USER_ACTION
# line 159 "compiler.l"
{ return ADD_ASSIGN; }
	YY_BREAK
case 72:
YY_USER_ACTION
# line 160 "compiler.l"
{ return SUB_ASSIGN; }
	YY_BREAK
case 73:
YY_USER_ACTION
# line 161 "compiler.l"
{ return SHL_ASSIGN; }
	YY_BREAK
case 74:
YY_USER_ACTION
# line 162 "compiler.l"
{ return SHR_ASSIGN; }
	YY_BREAK
case 75:
YY_USER_ACTION
# line 163 "compiler.l"
{ return AND_ASSIGN; }
	YY_BREAK
case 76:
YY_USER_ACTION
# line 164 "compiler.l"
{ return XOR_ASSIGN; }
	YY_BREAK
case 77:
YY_USER_ACTION
# line 165 "compiler.l"
{ return OR_ASSIGN; }
	YY_BREAK
case 78:
YY_USER_ACTION
# line 167 "compiler.l"
{ return '['; }
	YY_BREAK
case 79:
YY_USER_ACTION
# line 168 "compiler.l"
{ return ']'; }
	YY_BREAK
case 80:
YY_USER_ACTION
# line 169 "compiler.l"
{ return '('; }
	YY_BREAK
case 81:
YY_USER_ACTION
# line 170 "compiler.l"
{ return ')'; }
	YY_BREAK
case 82:
YY_USER_ACTION
# line 171 "compiler.l"
{ return '{'; }
	YY_BREAK
case 83:
YY_USER_ACTION
# line 172 "compiler.l"
{ return '}'; }
	YY_BREAK
case 84:
YY_USER_ACTION
# line 173 "compiler.l"
{ return '*'; }
	YY_BREAK
case 85:
YY_USER_ACTION
# line 174 "compiler.l"
{ return '/'; }
	YY_BREAK
case 86:
YY_USER_ACTION
# line 175 "compiler.l"
{ return '%'; }
	YY_BREAK
case 87:
YY_USER_ACTION
# line 176 "compiler.l"
{ return '+'; }
	YY_BREAK
case 88:
YY_USER_ACTION
# line 177 "compiler.l"
{ return '-'; }
	YY_BREAK
case 89:
YY_USER_ACTION
# line 178 "compiler.l"
{ return '<'; }
	YY_BREAK
case 90:
YY_USER_ACTION
# line 179 "compiler.l"
{ return '>'; }
	YY_BREAK
case 91:
YY_USER_ACTION
# line 180 "compiler.l"
{ return '&'; }
	YY_BREAK
case 92:
YY_USER_ACTION
# line 181 "compiler.l"
{ return '^'; }
	YY_BREAK
case 93:
YY_USER_ACTION
# line 182 "compiler.l"
{ return '|'; }
	YY_BREAK
case 94:
YY_USER_ACTION
# line 183 "compiler.l"
{ return '?'; }
	YY_BREAK
case 95:
YY_USER_ACTION
# line 184 "compiler.l"
{ return ':'; }
	YY_BREAK
case 96:
YY_USER_ACTION
# line 185 "compiler.l"
{ return '='; }
	YY_BREAK
case 97:
YY_USER_ACTION
# line 186 "compiler.l"
{ return ','; }
	YY_BREAK
case 98:
YY_USER_ACTION
# line 187 "compiler.l"
{ return ';'; }
	YY_BREAK
case 99:
YY_USER_ACTION
# line 189 "compiler.l"
{ }
	YY_BREAK
case 100:
YY_USER_ACTION
# line 190 "compiler.l"
{ }
	YY_BREAK
case 101:
YY_USER_ACTION
# line 191 "compiler.l"
{ }
	YY_BREAK
case 102:
YY_USER_ACTION
# line 192 "compiler.l"
{ }
	YY_BREAK
case 103:
YY_USER_ACTION
# line 193 "compiler.l"
{ }
	YY_BREAK
case 104:
YY_USER_ACTION
# line 194 "compiler.l"
{ }
	YY_BREAK
case 105:
YY_USER_ACTION
# line 196 "compiler.l"
{ new_fileref(); }
	YY_BREAK
case 106:
YY_USER_ACTION
# line 198 "compiler.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_input_file != yyin )
			{
			/* This can happen if we scan a file, yywrap() returns
			 * 1, and then later the user points yyin at a new
			 * file to resume scanning.  We have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input file.
			 */
			yy_current_buffer->yy_input_file = yyin;
			yy_n_chars = yy_current_buffer->yy_n_chars;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_eof_status = EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 2);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 291 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 2;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 291 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 290);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *yy_c_buf_p;
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->yy_fill_buffer = 1;

	b->yy_eof_status = EOF_NOT_SEEN;
	}


#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strcpy( char *s1, const char *s2 )
#else
static void yy_flex_strcpy( s1, s2 )
char *s1;
const char *s2;
#endif
	{
	while ( (*(s1++) = *(s2++)) )
		;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 198 "compiler.l"


/* ------------------------------------------------------------------
   Additional code (again copied verbatim to the output file)
   ------------------------------------------------------------------*/

inline long
input_location()
{
	long pos;
	long offset;
	
	pos = yy_c_buf_p - yy_current_buffer->yy_ch_buf;

	offset = g_globalpos;
	
	return pos + offset;
}

void
c_comment()
{
	while( true )
	{
		char c;

		do {
			c = yyinput();
			if( c == '\0' )
				return;
		} while( c != '*' );
	
		c = yyinput();
		if( c != '/' && c != '\0' )
			unput( c );
		else
			break;
	}
}

void
cpp_comment()
{
	char c;

	do {
		c = yyinput();
		if( c == '\0' )
			return;
	} while( c != '\n' );
}

void
extract_string_literal()
{
	const char*			s = yytext + 1;
	const isize_t		length = ( istrlen( s ) + 1 ) * sizeof( char );
	char*				t = (char*)xalloc( length );
	
	char*				p = t;
	char				c;
	bool				done = false;
	
	do {
		c = *s++;
		
		switch( c )
		{
			case '\\':
				switch( *s++ )
				{
					case 'n':
						c = '\n';
						break;

					case 't':
						c = '\t';
						break;

					case 'r':
						c = '\r';
						break;
						
					case '\"':
						c = '\"';
						break;

					case '\'':
						c = '\'';
						break;
				
					default:
						s--;
						break;
				}
				break;
		
			case '\"':
				c = '\0';
				done = true;
				break;
		}

		*p++ = c;
	} while( done == false );

	yylval.m_text = t;
}

void
new_fileref()
{
	fileid_t			fileid = 0;
	u32					offset = 0;
	int					i;
	char				c;
	
	// read id for file
	for( i = 0; i < LEX_FILEID_CHARS; i++ )
	{
		c =  yyinput();
		
		fileid <<= 4;

		if( c <= '9' )
			fileid += c - '0';
		else
			fileid += c - 'A' + 10;
	}
	
	// read offset inside file
	for( i = 0; i < LEX_FILEPOS_CHARS; i++ )
	{
		c =  yyinput();
		
		offset <<= 4;

		if( c <= '9' )
			offset += c - '0';
		else
			offset += c - 'A' + 10;
	}

	if( offset < 0 )
		throw_icarus_error( "fatal scanner error" );
	
	g_fileid = fileid;
	g_filepos = input_location() - offset;
}

BEGIN_COMPILER_NAMESPACE

void
init_lexer(
	input_stream_t*		yystream )
{
	g_yystream = yystream;
	g_fileid = fileid_invalid;
	g_filepos = 0;
	g_globalpos = 0;
}

void
cleanup_lexer()
{
	g_yystream = 0;
	g_fileid = fileid_invalid;
	g_filepos = 0;
	g_globalpos = 0;
}

void
get_filepos(
	fileref_t*			filepos )
{
	long				pos;
	
	if( !yy_current_buffer )
		pos = 0;
	else
	{
		pos = input_location() - g_filepos;
	
		if( pos < 0 )
		{
#if ICARUS_SAFE
			ICARUS_DEBUG_WRITELN( "illegal error location" );
#endif
			pos = 0;
		}
	}

	filepos->id = g_fileid;
	filepos->pos = pos;
}

END_COMPILER_NAMESPACE
