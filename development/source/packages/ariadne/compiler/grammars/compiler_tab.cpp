// This file is part of incalang.

// incalang is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.

// incalang is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Foobar; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/*  A Bison parser, made from compiler.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	UNSIGNED	258
#define	SIGNED	259
#define	BOOL	260
#define	CHAR	261
#define	DOUBLE	262
#define	FLOAT	263
#define	INT	264
#define	LONG	265
#define	BYTE	266
#define	WIDE	267
#define	SHORT	268
#define	VOID	269
#define	TYPENAME	270
#define	CAST	271
#define	CONST	272
#define	IDENTIFIER	273
#define	MODULE	274
#define	NAMESPACE	275
#define	TEMPLATE	276
#define	USING	277
#define	HEX_CONSTANT	278
#define	BIN_CONSTANT	279
#define	OCT_CONSTANT	280
#define	INT_CONSTANT	281
#define	CHR_CONSTANT	282
#define	FLT_CONSTANT	283
#define	STRING_LITERAL	284
#define	IMPORT_DLL	285
#define	COMPILER_SETTING	286
#define	INC_OP	287
#define	DEC_OP	288
#define	PTR_OP	289
#define	SIZEOF	290
#define	TRY	291
#define	CATCH	292
#define	THROW	293
#define	SHL_OP	294
#define	SHR_OP	295
#define	LE_OP	296
#define	GE_OP	297
#define	EQ_OP	298
#define	NE_OP	299
#define	AND_OP	300
#define	OR_OP	301
#define	MUL_ASSIGN	302
#define	DIV_ASSIGN	303
#define	MOD_ASSIGN	304
#define	ADD_ASSIGN	305
#define	SUB_ASSIGN	306
#define	SHL_ASSIGN	307
#define	SHR_ASSIGN	308
#define	AND_ASSIGN	309
#define	XOR_ASSIGN	310
#define	OR_ASSIGN	311
#define	TYPEDEF	312
#define	STATIC	313
#define	NATIVE	314
#define	ABSTRACT	315
#define	OPERATOR	316
#define	PUBLIC	317
#define	PRIVATE	318
#define	PROTECTED	319
#define	FRIEND	320
#define	ENUM	321
#define	OF	322
#define	CASE	323
#define	DEFAULT	324
#define	IF	325
#define	ELSE	326
#define	SWITCH	327
#define	WHILE	328
#define	DO	329
#define	FOR	330
#define	GOTO	331
#define	CONTINUE	332
#define	BREAK	333
#define	RETURN	334
#define	CLASS	335
#define	STRUCT	336
#define	EXTENDS	337
#define	NEW	338
#define	DELETE	339
#define	SCOPE_OP	340
#define	NULLTOKEN	341
#define	THISTOKEN	342
#define	TRUETOKEN	343
#define	FALSETOKEN	344
#define	NOT	345

#line 1 "compiler.y"


/* ------------------------------------------------------------------
   Initial code (copied verbatim to the output file)
   ------------------------------------------------------------------*/

#if __VISC__
#include <malloc.h>
#define alloca _alloca
#endif

//#define YYDEBUG 1

#include "expr_t.h"
#include "type_t.h"
#include "stmt_t.h"
#include "scope_t.h"
#include "class_t.h"

#include "parser.h"
#include "parse_number.h"
#include "xalloc.h"

#include "icarus.h"
#include "stdio.h"

using namespace compiler;

int yylex();

void yyerror( char *msg );

#define YYSTACK_ALLOC imalloc
#define YYSTACK_FREE ifree


#line 42 "compiler.y"
typedef union {
	int							m_flags;
	const char*					m_text;

	expr_t*						m_expr;
	e_expr_code					m_expr_code;

	decl_t*						m_decl;
	decl_spec_t*				m_decl_spec;
	decl_init_t*				m_decl_init;
	array_decl_t*				m_array_decl;
	enum_list_t*				m_enum_list;
	typename_list_t*			m_typename_list;

	type_t*						m_type;
	type_seq_t*					m_type_seq;
	qualname_t*					m_qualname;
	qualhead_t*					m_qualhead;
	
	class_spec_t*				m_clss_spec;
	
	stmt_t*						m_stmt;
	int							m_none;
	int							m_qualifiers;
	
	class_t*					m_class;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		506
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 345 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   105,    99,     2,    91,
    92,   100,   101,    98,   102,    97,   104,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,   109,    93,
   108,    94,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    95,     2,    96,   106,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   110,   107,   111,   103,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    24,    26,    30,    33,    41,    43,    48,    52,
    57,    65,    74,    78,    82,    85,    88,    90,    94,    96,
    99,   102,   105,   108,   113,   115,   117,   119,   121,   123,
   125,   127,   133,   138,   140,   144,   148,   152,   154,   158,
   162,   164,   168,   172,   174,   178,   182,   186,   190,   192,
   196,   200,   202,   206,   208,   212,   214,   218,   220,   224,
   226,   230,   232,   236,   238,   240,   242,   244,   246,   248,
   250,   252,   254,   256,   258,   260,   262,   266,   268,   272,
   275,   277,   279,   282,   284,   288,   292,   299,   301,   304,
   306,   308,   310,   312,   314,   317,   319,   321,   325,   327,
   331,   333,   335,   337,   339,   341,   343,   345,   347,   349,
   351,   355,   359,   361,   364,   366,   370,   372,   375,   377,
   380,   383,   385,   388,   390,   392,   396,   399,   402,   405,
   408,   411,   414,   417,   420,   423,   426,   429,   432,   435,
   438,   441,   444,   447,   450,   453,   456,   459,   462,   465,
   468,   471,   474,   477,   480,   483,   486,   489,   492,   495,
   498,   501,   505,   510,   512,   514,   516,   519,   524,   528,
   530,   532,   535,   537,   540,   544,   547,   552,   556,   558,
   560,   563,   565,   568,   571,   575,   578,   582,   584,   586,
   590,   595,   598,   600,   602,   606,   608,   612,   614,   616,
   618,   620,   622,   624,   626,   628,   630,   634,   641,   643,
   646,   650,   654,   657,   661,   664,   667,   671,   673,   676,
   678,   681,   687,   695,   701,   707,   715,   722,   730,   739,
   748,   758,   765,   773,   781,   790,   794,   797,   800,   803,
   807,   809,   811,   813,   815,   817,   819,   825,   829,   831,
   834,   838,   841,   844,   847,   850,   853,   856,   858,   862,
   863,   869,   870,   878,   882,   888,   889,   895,   900,   905,
   906,   911,   912,   919,   921,   923,   925,   927,   931,   933,
   937,   941,   947,   952
};

static const short yyrhs[] = {   177,
     0,   146,     0,    23,     0,    24,     0,    25,     0,    26,
     0,    27,     0,    28,     0,    29,     0,    86,     0,    87,
     0,    88,     0,    89,     0,    91,   133,    92,     0,    83,
   136,     0,    83,    93,   136,    94,    91,   133,    92,     0,
   114,     0,   115,    95,   133,    96,     0,   115,    91,    92,
     0,   115,    91,   116,    92,     0,   115,    67,    93,   137,
    94,    91,    92,     0,   115,    67,    93,   137,    94,    91,
   116,    92,     0,   115,    97,   146,     0,   115,    34,   146,
     0,   115,    32,     0,   115,    33,     0,   130,     0,   130,
    98,   116,     0,   115,     0,    32,   117,     0,    33,   117,
     0,   118,   119,     0,    35,   117,     0,    35,    93,   136,
    94,     0,    99,     0,   100,     0,   101,     0,   102,     0,
   103,     0,    90,     0,   117,     0,    16,    93,   136,    94,
   119,     0,    91,   136,    92,   119,     0,   119,     0,   120,
   100,   119,     0,   120,   104,   119,     0,   120,   105,   119,
     0,   120,     0,   121,   101,   120,     0,   121,   102,   120,
     0,   121,     0,   122,    39,   121,     0,   122,    40,   121,
     0,   122,     0,   123,    93,   122,     0,   123,    94,   122,
     0,   123,    41,   122,     0,   123,    42,   122,     0,   123,
     0,   124,    43,   123,     0,   124,    44,   123,     0,   124,
     0,   125,    99,   124,     0,   125,     0,   126,   106,   125,
     0,   126,     0,   127,   107,   126,     0,   127,     0,   128,
    45,   127,     0,   128,     0,   129,    46,   128,     0,   129,
     0,   130,   132,   129,     0,   130,     0,   108,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    52,
     0,    53,     0,    54,     0,    55,     0,    56,     0,   130,
     0,   133,    98,   130,     0,   131,     0,   134,    98,   130,
     0,    84,   133,     0,   129,     0,   149,     0,   149,   154,
     0,   136,     0,   137,    98,   136,     0,   141,   142,   109,
     0,   141,    93,   137,    94,   142,   109,     0,   140,     0,
   139,   140,     0,    57,     0,    58,     0,    17,     0,    59,
     0,    60,     0,   139,   149,     0,   149,     0,   143,     0,
   143,    98,   142,     0,   150,     0,   150,   108,   161,     0,
    14,     0,     5,     0,    11,     0,     6,     0,    13,     0,
     9,     0,    10,     0,     8,     0,     7,     0,    18,     0,
   145,    85,    18,     0,   147,    85,    18,     0,   145,     0,
    85,   145,     0,    15,     0,   147,    85,    15,     0,   147,
     0,    85,   147,     0,   144,     0,     4,   144,     0,     3,
   144,     0,   148,     0,   157,   153,     0,   157,     0,   153,
     0,    61,    95,    96,     0,    61,    97,     0,    61,    99,
     0,    61,    90,     0,    61,    45,     0,    61,    46,     0,
    61,   103,     0,    61,   106,     0,    61,   107,     0,    61,
   101,     0,    61,   102,     0,    61,   100,     0,    61,   104,
     0,    61,   105,     0,    61,    39,     0,    61,    40,     0,
    61,    93,     0,    61,    94,     0,    61,    41,     0,    61,
    42,     0,    61,    43,     0,    61,    44,     0,    61,   108,
     0,    61,    47,     0,    61,    48,     0,    61,    49,     0,
    61,    50,     0,    61,    51,     0,    61,    52,     0,    61,
    53,     0,    61,    54,     0,    61,    55,     0,    61,    56,
     0,    61,    32,     0,    61,    33,     0,    61,    16,     0,
    95,   133,    96,     0,   152,    95,   133,    96,     0,    18,
     0,    15,     0,   151,     0,   153,   152,     0,   153,    91,
   158,    92,     0,   153,    91,    92,     0,   157,     0,   155,
     0,   157,   155,     0,   152,     0,   155,   152,     0,    91,
   158,    92,     0,    91,    92,     0,   155,    91,   158,    92,
     0,   155,    91,    92,     0,    17,     0,   100,     0,   157,
   100,     0,    99,     0,   157,    99,     0,   156,   100,     0,
   157,   156,   100,     0,   156,    99,     0,   157,   156,    99,
     0,   159,     0,   160,     0,   160,    98,   159,     0,   141,
   150,   108,   161,     0,   141,   150,     0,   141,     0,   130,
     0,   110,   162,   111,     0,   161,     0,   161,    98,   162,
     0,   168,     0,   169,     0,   171,     0,   172,     0,   173,
     0,   174,     0,   175,     0,   166,     0,   167,     0,    31,
    29,   109,     0,    37,    91,   141,   150,    92,   169,     0,
   164,     0,   165,   164,     0,    36,   169,   165,     0,    38,
   133,   109,     0,    18,   112,     0,    68,   135,   112,     0,
    69,   112,     0,   110,   111,     0,   110,   170,   111,     0,
   163,     0,   163,   170,     0,   109,     0,   134,   109,     0,
    70,    91,   133,    92,   163,     0,    70,    91,   133,    92,
   163,    71,   163,     0,    72,    91,   133,    92,   163,     0,
    73,    91,   133,    92,   163,     0,    74,   163,    73,    91,
   133,    92,   109,     0,    75,    91,   109,   109,    92,   163,
     0,    75,    91,   133,   109,   109,    92,   163,     0,    75,
    91,   133,   109,   109,   133,    92,   163,     0,    75,    91,
   133,   109,   133,   109,    92,   163,     0,    75,    91,   133,
   109,   133,   109,   133,    92,   163,     0,    75,    91,   138,
   109,    92,   163,     0,    75,    91,   138,   109,   133,    92,
   163,     0,    75,    91,   138,   133,   109,    92,   163,     0,
    75,    91,   138,   133,   109,   133,    92,   163,     0,    76,
    18,   109,     0,    77,   109,     0,    78,   109,     0,    79,
   109,     0,    79,   133,   109,     0,   138,     0,   178,     0,
   138,     0,   182,     0,   188,     0,   191,     0,    19,    15,
   110,   177,   111,     0,    31,    29,   109,     0,   176,     0,
   176,   177,     0,   141,   150,   169,     0,    80,    15,     0,
    81,    15,     0,    80,    18,     0,    81,    18,     0,    20,
    15,     0,    20,    18,     0,   148,     0,   148,    98,   181,
     0,     0,   179,   110,   183,   177,   111,     0,     0,   179,
    82,   181,   110,   184,   177,   111,     0,   179,   110,   111,
     0,   179,    82,   181,   110,   111,     0,     0,   180,   110,
   185,   177,   111,     0,    65,    80,   148,   109,     0,    22,
    20,   148,   109,     0,     0,    21,   189,   186,   176,     0,
     0,    30,    29,   110,   187,   177,   111,     0,    62,     0,
    63,     0,    64,     0,    15,     0,   189,    98,    15,     0,
    18,     0,    18,   108,   135,     0,   190,    98,    18,     0,
   190,    98,    18,   108,   135,     0,    66,   110,   190,   111,
     0,    66,    15,   110,   190,   111,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   186,   190,   192,   194,   196,   198,   200,   202,   204,   206,
   208,   210,   212,   214,   216,   218,   223,   225,   227,   229,
   231,   233,   235,   237,   239,   241,   246,   248,   253,   254,
   256,   258,   261,   265,   273,   275,   277,   279,   281,   283,
   288,   290,   294,   301,   303,   305,   307,   312,   314,   316,
   321,   323,   325,   330,   332,   334,   336,   338,   343,   345,
   347,   352,   354,   359,   361,   366,   368,   373,   375,   380,
   382,   393,   395,   400,   413,   415,   417,   419,   421,   423,
   425,   427,   429,   431,   433,   438,   440,   445,   447,   449,
   454,   459,   461,   472,   474,   480,   488,   500,   502,   507,
   509,   511,   513,   515,   520,   522,   527,   529,   536,   538,
   546,   548,   550,   552,   554,   556,   558,   560,   562,   567,
   569,   575,   584,   588,   595,   597,   606,   610,   617,   620,
   626,   632,   637,   641,   645,   650,   652,   654,   656,   658,
   660,   662,   664,   666,   668,   670,   672,   674,   676,   678,
   680,   682,   684,   686,   688,   690,   692,   694,   696,   698,
   700,   702,   704,   706,   708,   710,   712,   714,   716,   718,
   720,   725,   727,   737,   739,   741,   743,   745,   749,   756,
   760,   762,   769,   771,   773,   777,   781,   785,   792,   797,
   799,   801,   803,   805,   807,   809,   811,   816,   821,   823,
   830,   835,   839,   846,   851,   858,   860,   868,   870,   872,
   874,   876,   878,   880,   882,   884,   886,   892,   898,   900,
   905,   910,   915,   917,   919,   924,   926,   931,   933,   940,
   942,   947,   949,   951,   956,   958,   960,   962,   964,   966,
   968,   970,   972,   974,   976,   981,   983,   985,   987,   989,
   994,   999,  1000,  1002,  1003,  1004,  1005,  1007,  1014,  1015,
  1019,  1026,  1028,  1030,  1034,  1041,  1043,  1050,  1052,  1059,
  1061,  1063,  1065,  1067,  1069,  1071,  1074,  1076,  1078,  1081,
  1090,  1092,  1098,  1103,  1105,  1107,  1112,  1114,  1119,  1122,
  1125,  1128,  1134,  1137
};

static const char * const yytname[] = {   "$","error","$undefined.","UNSIGNED",
"SIGNED","BOOL","CHAR","DOUBLE","FLOAT","INT","LONG","BYTE","WIDE","SHORT","VOID",
"TYPENAME","CAST","CONST","IDENTIFIER","MODULE","NAMESPACE","TEMPLATE","USING",
"HEX_CONSTANT","BIN_CONSTANT","OCT_CONSTANT","INT_CONSTANT","CHR_CONSTANT","FLT_CONSTANT",
"STRING_LITERAL","IMPORT_DLL","COMPILER_SETTING","INC_OP","DEC_OP","PTR_OP",
"SIZEOF","TRY","CATCH","THROW","SHL_OP","SHR_OP","LE_OP","GE_OP","EQ_OP","NE_OP",
"AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN",
"SHL_ASSIGN","SHR_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPEDEF","STATIC",
"NATIVE","ABSTRACT","OPERATOR","PUBLIC","PRIVATE","PROTECTED","FRIEND","ENUM",
"OF","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE",
"BREAK","RETURN","CLASS","STRUCT","EXTENDS","NEW","DELETE","SCOPE_OP","NULLTOKEN",
"THISTOKEN","TRUETOKEN","FALSETOKEN","NOT","'('","')'","'<'","'>'","'['","']'",
"'.'","','","'&'","'*'","'+'","'-'","'~'","'/'","'%'","'^'","'|'","'='","';'",
"'{'","'}'","':'","compilation_unit","primary_expression","postfix_expression",
"argument_expression_list","unary_expression","unary_operator","cast_expression",
"multiplicative_expression","additive_expression","shift_expression","relational_expression",
"equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression",
"logical_and_expression","logical_or_expression","assignment_expression","stmt_assignment_expression",
"assignment_operator","expression","stmt_expression","constant_expression","type_name",
"type_name_seq","declaration","modifiers","modifier","declaration_specifiers",
"init_declarator_list","init_declarator","primitive_type","simple_qualified_name",
"qualified_name","simple_qualified_type","qualified_type","type_specifier","declarator",
"operator_identifier","array_declarator","direct_declarator","abstract_declarator",
"direct_abstract_declarator","qualifiers","pointer","parameter_type_list","parameter_list",
"parameter_declaration","initializer","initializer_list","statement","catch_statement",
"catch_statement_list","try_statement","throw_statement","labeled_statement",
"compound_statement","statement_list","expression_statement","selection_statement",
"iteration_statement","jump_statement","declaration_statement","member_declaration",
"member_declaration_list","function_definition","class_prefix","namespace_prefix",
"qualifed_type_list","class_declaration","@1","@2","@3","@4","@5","access_declaration",
"typename_list","enumerator_list","enum_declaration",""
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   116,   116,   117,   117,
   117,   117,   117,   117,   118,   118,   118,   118,   118,   118,
   119,   119,   119,   120,   120,   120,   120,   121,   121,   121,
   122,   122,   122,   123,   123,   123,   123,   123,   124,   124,
   124,   125,   125,   126,   126,   127,   127,   128,   128,   129,
   129,   130,   130,   131,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   133,   133,   134,   134,   134,
   135,   136,   136,   137,   137,   138,   138,   139,   139,   140,
   140,   140,   140,   140,   141,   141,   142,   142,   143,   143,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   145,
   145,   145,   146,   146,   147,   147,   148,   148,   149,   149,
   149,   149,   150,   150,   150,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   152,   152,   153,   153,   153,   153,   153,   153,   154,
   154,   154,   155,   155,   155,   155,   155,   155,   156,   157,
   157,   157,   157,   157,   157,   157,   157,   158,   159,   159,
   160,   160,   160,   161,   161,   162,   162,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   164,   165,   165,
   166,   167,   168,   168,   168,   169,   169,   170,   170,   171,
   171,   172,   172,   172,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   174,   174,   174,   174,   174,
   175,   176,   176,   176,   176,   176,   176,   176,   177,   177,
   178,   179,   179,   179,   179,   180,   180,   181,   181,   183,
   182,   184,   182,   182,   182,   185,   182,   182,   182,   186,
   182,   187,   182,   188,   188,   188,   189,   189,   190,   190,
   190,   190,   191,   191
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     2,     7,     1,     4,     3,     4,
     7,     8,     3,     3,     2,     2,     1,     3,     1,     2,
     2,     2,     2,     4,     1,     1,     1,     1,     1,     1,
     1,     5,     4,     1,     3,     3,     3,     1,     3,     3,
     1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     3,     2,
     1,     1,     2,     1,     3,     3,     6,     1,     2,     1,
     1,     1,     1,     1,     2,     1,     1,     3,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     3,     1,     2,     1,     3,     1,     2,     1,     2,
     2,     1,     2,     1,     1,     3,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     3,     4,     1,     1,     1,     2,     4,     3,     1,
     1,     2,     1,     2,     3,     2,     4,     3,     1,     1,
     2,     1,     2,     2,     3,     2,     3,     1,     1,     3,
     4,     2,     1,     1,     3,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     6,     1,     2,
     3,     3,     2,     3,     2,     2,     3,     1,     2,     1,
     2,     5,     7,     5,     5,     7,     6,     7,     8,     8,
     9,     6,     7,     7,     8,     3,     2,     2,     2,     3,
     1,     1,     1,     1,     1,     1,     5,     3,     1,     2,
     3,     2,     2,     2,     2,     2,     2,     1,     3,     0,
     5,     0,     7,     3,     5,     0,     5,     4,     4,     0,
     4,     0,     6,     1,     1,     1,     1,     3,     1,     3,
     3,     5,     4,     5
};

static const short yydefact[] = {     0,
     0,     0,   112,   114,   119,   118,   116,   117,   113,   115,
   111,   125,   102,     0,     0,     0,     0,     0,     0,   100,
   101,   103,   104,   284,   285,   286,     0,     0,     0,     0,
     0,   253,     0,    98,     0,   129,   127,   132,   106,   259,
     1,   252,     0,     0,   254,   255,   256,   131,   130,     0,
   266,   267,   287,   280,     0,     0,     0,     0,     0,     0,
   262,   264,   263,   265,   128,    99,   105,   175,   189,   174,
     0,     0,   192,   190,     0,   107,   109,   176,   135,     0,
   134,     0,   260,     0,   270,   276,     0,     0,     0,     0,
   282,   258,     0,     0,   289,     0,   171,   169,   170,   150,
   151,   154,   155,   156,   157,   140,   141,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   139,   152,   153,
     0,   137,   138,   147,   145,   146,   142,   148,   149,   143,
   144,   158,    94,     0,    92,    96,     0,     0,     0,   261,
     0,     0,   177,   196,   194,   193,   191,   133,     0,   126,
   268,     0,   274,     0,     0,     0,   288,   281,   279,     0,
   278,     0,     0,     0,   293,   136,     0,     0,     0,   183,
    93,   181,   180,   108,   109,     0,   120,     3,     4,     5,
     6,     7,     8,     9,     0,     0,     0,     0,     0,    10,
    11,    12,    13,    40,     0,    35,    36,    37,    38,    39,
     0,    17,    29,    41,     0,    44,    48,    51,    54,    59,
    62,    64,    66,    68,    70,    72,   204,   123,     2,     0,
   110,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,   226,
    74,    88,     0,   251,     0,   127,   228,   215,   216,   208,
   209,     0,   210,   211,   212,   213,   214,   179,   203,     0,
   198,   199,    86,     0,     0,   197,   195,     0,   272,     0,
     0,   257,     0,   294,    91,   290,   291,     0,    95,   186,
     0,     0,   184,   182,     0,     0,    30,    31,     0,    33,
     0,    15,   124,     0,     0,   206,     0,    25,    26,     0,
     0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    75,     0,     0,     0,   223,     0,     0,
     0,     0,   225,     0,     0,     0,     0,     0,     0,   247,
   248,   249,     0,    90,   128,     0,   231,   229,   227,   202,
   178,     0,   172,     0,     0,   269,   275,     0,   271,   277,
   283,     0,    97,   185,   188,     0,     0,     0,     0,    14,
     0,     0,   205,    24,     0,    19,     0,    27,     0,    23,
    45,    46,    47,    49,    50,    52,    53,    57,    58,    55,
    56,    60,    61,    63,    65,    67,    69,    71,    73,   121,
   122,   217,     0,   219,   221,   222,   224,     0,     0,     0,
     0,     0,     0,     0,   246,   250,    89,     0,   200,    87,
   173,     0,   292,   187,     0,    34,     0,    43,   207,     0,
    20,     0,    18,     0,   220,     0,     0,     0,     0,     0,
     0,     0,     0,   201,   273,    42,     0,     0,    28,     0,
   232,   234,   235,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   237,     0,     0,     0,   242,
     0,     0,     0,    16,    21,     0,     0,   233,   236,   238,
     0,     0,     0,   243,   244,     0,    22,   218,   239,   240,
     0,   245,   241,     0,     0,     0
};

static const short yydefgoto[] = {   504,
   202,   203,   387,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   263,   242,   335,   294,
   243,   276,   133,   134,   244,    33,    34,   245,    75,    76,
    36,   218,   219,   220,    38,    39,   175,    78,   143,    79,
   171,   172,    80,    81,   260,   261,   262,   296,   297,   247,
   414,   415,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,    40,    41,    42,    43,    44,   152,    45,   154,
   368,   155,    89,   160,    46,    54,    96,    47
};

static const short yypact[] = {  1576,
   235,   235,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    12,    38,    17,    26,    59,    66,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -43,     2,   197,   215,
    68,-32768,  1605,-32768,   117,-32768,    15,-32768,-32768,  1576,
-32768,-32768,   -61,    32,-32768,-32768,-32768,-32768,-32768,    40,
-32768,-32768,-32768,    30,     9,    49,     6,     9,    57,   154,
-32768,-32768,-32768,-32768,    15,-32768,-32768,-32768,-32768,-32768,
  1061,   299,-32768,-32768,   119,   152,   124,-32768,     7,   122,
    48,   251,-32768,     9,   164,-32768,  1576,   269,  1576,   178,
-32768,-32768,   190,   154,   203,   -73,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   220,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -25,    22,-32768,    62,   843,   499,-32768,
   426,  1365,   223,-32768,-32768,-32768,-32768,     7,   180,-32768,
   224,   232,-32768,  1576,  1576,   233,-32768,-32768,-32768,  1576,
-32768,   -57,  1365,   313,-32768,-32768,    62,   299,   535,   223,
-32768,    35,    45,-32768,   225,   250,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1475,  1475,  1454,   193,   221,-32768,
-32768,-32768,-32768,-32768,   754,-32768,-32768,-32768,-32768,-32768,
   843,-32768,   186,-32768,  1365,-32768,    33,   222,   286,   -12,
   284,   247,   243,   245,   308,   310,   209,   272,-32768,   276,
-32768,   254,   334,   257,  1365,  1365,   263,   285,   288,   290,
   608,   291,   365,   278,   279,   869,  1365,   221,-32768,-32768,
   209,-32768,   -62,-32768,   117,   276,   608,-32768,-32768,-32768,
-32768,   280,-32768,-32768,-32768,-32768,-32768,-32768,    62,   298,
-32768,   294,   209,   171,  1365,-32768,-32768,     9,   296,   300,
   303,-32768,   305,-32768,   310,-32768,   287,   293,-32768,-32768,
   304,   904,   223,    35,   299,  1365,-32768,-32768,   299,-32768,
   299,-32768,   272,   -31,   307,   311,   306,-32768,-32768,     8,
   312,  1103,  1365,     8,-32768,  1365,  1365,  1365,  1365,  1365,
  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
  1365,  1365,  1365,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1365,   379,   236,-32768,   301,   381,
   -50,   309,-32768,  1365,  1365,  1365,   347,   716,   314,-32768,
-32768,-32768,   -38,   324,   276,  1365,-32768,-32768,-32768,   316,
-32768,  1605,-32768,  1365,   192,-32768,-32768,  1576,-32768,-32768,
-32768,  1365,-32768,-32768,-32768,   333,   344,   348,   351,-32768,
  1365,   843,-32768,-32768,   299,-32768,   335,   604,   202,-32768,
-32768,-32768,-32768,    33,    33,   222,   222,   286,   286,   286,
   286,   -12,   -12,   284,   247,   243,   245,   308,   310,-32768,
-32768,-32768,   358,-32768,   381,-32768,-32768,   -22,    13,    18,
   359,   342,   -23,   958,-32768,-32768,   209,   843,-32768,   209,
-32768,   341,-32768,-32768,  1365,-32768,   362,-32768,-32768,   115,
-32768,  1365,-32768,  1605,-32768,   608,   608,   608,  1365,   363,
   983,  1192,   -13,-32768,-32768,-32768,  1365,   366,-32768,    62,
   385,-32768,-32768,    54,   608,  1213,     5,   608,    79,  1234,
    84,  1323,   367,   608,   349,-32768,   608,    91,  1344,-32768,
   608,   608,    92,-32768,-32768,   368,   257,-32768,-32768,-32768,
   608,   608,   113,-32768,-32768,   608,-32768,-32768,-32768,-32768,
   608,-32768,-32768,   461,   462,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,  -420,    86,-32768,  -200,    20,    23,  -122,    19,
   144,   146,   143,   145,   147,  -148,  -127,-32768,-32768,   -51,
-32768,  -206,  -160,    87,     3,-32768,   436,    10,  -103,-32768,
   338,  -170,   -77,     0,   -42,   -15,   -34,-32768,  -128,   390,
-32768,   302,   -72,   343,  -155,   111,-32768,  -132,    94,   -88,
    64,-32768,-32768,-32768,-32768,   -75,   240,-32768,-32768,-32768,
-32768,-32768,   391,   -36,-32768,-32768,-32768,   226,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   394,-32768
};


#define	YYLAST		1690


static const short yytable[] = {    37,
    77,   140,    32,    83,   305,   221,   170,   279,   149,    35,
   217,   241,    90,   281,   275,    93,    59,    67,   293,   342,
    84,   459,    12,    12,   164,   177,    50,   292,   313,   314,
    65,    53,    37,   174,   295,   356,    58,   165,    69,    37,
   164,   151,    32,   283,   170,    55,   357,   364,    85,    35,
   156,   486,    51,   274,    37,    52,   135,    37,   416,   364,
   380,    69,    68,   278,    69,    70,   364,   293,   167,   446,
   426,    37,   168,   217,   364,   364,    68,   275,    69,    70,
   315,   316,    12,    37,   364,   451,    37,    56,    37,    32,
   264,    32,   189,    31,    57,   470,    35,   141,    35,    82,
   149,   142,   364,   241,   447,   391,   392,   393,    71,   448,
   364,    60,   169,   479,    92,   364,   142,   270,   271,   241,
    73,    74,    71,   273,   377,   282,   376,    88,   378,   142,
   379,    68,   306,    69,    70,   169,   307,   308,   246,   142,
    37,    86,   347,   146,   147,   475,   146,   147,   340,    87,
   259,   364,   135,    37,    37,   283,    32,    32,    91,    37,
    73,    74,    32,    35,    35,   433,    94,    37,    37,    35,
   481,    95,   135,   341,   388,   484,   364,    71,   259,   135,
   438,   364,   491,   496,   353,   354,   409,    37,   364,   364,
   398,   399,   400,   401,   246,     1,     2,     3,     4,     5,
     6,     7,     8,     9,   501,    10,    11,    12,   458,    72,
   364,    61,   168,   365,    62,    73,    74,   298,   299,   300,
   144,   145,   384,   275,   360,   151,   390,   136,   427,    63,
   246,   138,    64,   139,   456,    12,   430,   355,   177,     3,
     4,     5,     6,     7,     8,     9,   246,    10,    11,   137,
   150,   389,   301,   411,   217,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   150,   363,    37,   364,   135,
   287,   288,   290,   135,   153,   135,   302,    31,   266,   267,
   303,    37,   304,   157,    37,   291,   159,   431,    37,   364,
    37,   259,   418,   419,   420,   454,   423,   443,   161,   364,
   217,     1,     2,     3,     4,     5,     6,     7,     8,     9,
   163,    10,    11,    12,   388,   166,   334,   265,   241,   241,
   241,   268,   309,   310,   311,   312,   317,   318,   394,   395,
   277,   432,   138,   396,   397,   402,   403,   241,    48,    49,
   241,   269,   285,   272,   388,   319,   241,   246,   320,   241,
   424,   321,   322,   241,   241,   323,   336,   461,   462,   463,
   337,    37,   339,   241,   241,   338,   139,    37,   241,   135,
    32,   259,   453,   241,   343,   344,   476,    35,   345,   480,
   346,   348,   349,    31,    37,   488,   350,   351,   490,   361,
   359,   362,   494,   495,   372,   374,   410,   464,   381,   467,
   469,   373,   499,   500,   385,   471,   367,   502,   382,   412,
   369,   498,   503,   370,   478,   371,   383,   413,   483,   421,
   417,   364,   425,   428,   434,   473,   441,   493,     1,     2,
     3,     4,     5,     6,     7,     8,     9,   435,    10,    11,
    12,   436,    13,    37,   437,   246,   246,   246,   444,   449,
   450,   455,   457,   460,   465,   474,   472,   489,   487,   497,
   505,   506,   404,   406,   246,   405,   407,   246,    66,   408,
   148,   440,   429,   246,   284,   439,   246,   173,   445,   158,
   246,   246,    20,    21,    22,    23,   358,   162,     0,     0,
   246,   246,     0,   366,     0,   246,     0,     0,     0,     0,
   246,     1,     2,     3,     4,     5,     6,     7,     8,     9,
    31,    10,    11,    12,   176,    13,   222,   258,     0,     0,
     0,   178,   179,   180,   181,   182,   183,   184,     0,   223,
   185,   186,     0,   187,   224,     0,   225,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,    10,    11,    12,
     0,    13,     0,     0,     0,    20,    21,    22,    23,     0,
     0,     0,     0,     0,     0,     0,   226,   227,   228,     0,
   229,   230,   231,   232,   233,   234,   235,   236,     0,     0,
     0,   188,   237,   238,   190,   191,   192,   193,   194,   195,
     0,    20,    21,    22,    23,     0,     0,   196,   197,   198,
   199,   200,     0,     0,     0,     0,     0,   239,   139,   240,
     1,     2,     3,     4,     5,     6,     7,     8,     9,    31,
    10,    11,    12,   176,    13,   222,   280,     0,     0,     0,
   178,   179,   180,   181,   182,   183,   184,     0,   223,   185,
   186,     0,   187,   224,     0,   225,     0,     0,     0,     0,
   324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,    20,    21,    22,    23,     0,     0,
     0,     0,     0,     0,     0,   226,   227,   228,     0,   229,
   230,   231,   232,   233,   234,   235,   236,     0,     0,     0,
   188,   237,   238,   190,   191,   192,   193,   194,   195,     0,
     0,   442,     0,     0,     0,     0,   196,   197,   198,   199,
   200,   334,     0,     0,     0,     0,   239,   139,     1,     2,
     3,     4,     5,     6,     7,     8,     9,     0,    10,    11,
    12,   176,    13,   177,     0,     0,     0,     0,   178,   179,
   180,   181,   182,   183,   184,     0,     0,   185,   186,     0,
   187,     0,     0,     0,     0,     0,     1,     2,     3,     4,
     5,     6,     7,     8,     9,     0,    10,    11,    12,   176,
     0,   177,    20,    21,    22,    23,   178,   179,   180,   181,
   182,   183,   184,     0,     0,   185,   186,     0,   187,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   188,     0,
   238,   190,   191,   192,   193,   194,   195,     0,     0,     0,
     0,     0,     0,     0,   196,   197,   198,   199,   200,     0,
     0,     0,     0,     0,   422,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,     0,   238,   190,
   191,   192,   193,   194,   195,     0,     0,     0,     0,     0,
     0,     0,   196,   197,   198,   199,   200,    12,   176,     0,
   177,     0,     0,     0,     0,   178,   179,   180,   181,   182,
   183,   184,     0,     0,   185,   186,     0,   187,     0,     0,
     0,     0,     0,    12,   176,     0,   177,     0,     0,     0,
     0,   178,   179,   180,   181,   182,   183,   184,     0,     0,
   185,   186,     0,   187,     0,     0,     1,     2,     3,     4,
     5,     6,     7,     8,     9,     0,    10,    11,    12,     0,
    13,     0,     0,     0,     0,   188,     0,   189,   190,   191,
   192,   193,   194,   195,     0,     0,     0,     0,     0,     0,
     0,   196,   197,   198,   199,   200,     0,     0,     0,     0,
     0,   188,   201,   189,   190,   191,   192,   193,   194,   195,
    20,    21,    22,    23,     0,     0,     0,   196,   197,   198,
   199,   200,    12,   176,     0,   177,     0,   352,     0,     0,
   178,   179,   180,   181,   182,   183,   184,     0,    31,   185,
   186,     0,   187,     0,     0,   375,     0,    12,   176,     0,
   177,     0,     0,     0,     0,   178,   179,   180,   181,   182,
   183,   184,     0,     0,   185,   186,     0,   187,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   188,     0,   189,   190,   191,   192,   193,   194,   195,     0,
     0,     0,     0,     0,     0,     0,   196,   197,   198,   199,
   200,     0,     0,     0,     0,   188,   452,   189,   190,   191,
   192,   193,   194,   195,     0,     0,    97,     0,     0,     0,
     0,   196,   197,   198,   199,   200,     0,     0,     0,     0,
     0,   466,    98,    99,     0,     0,     0,     0,     0,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,    12,   176,     0,
   177,     0,     0,     0,     0,   178,   179,   180,   181,   182,
   183,   184,     0,     0,   185,   186,     0,   187,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   118,     0,     0,   119,   120,   121,     0,   122,     0,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   188,     0,   189,   190,   191,
   192,   193,   194,   195,   386,     0,     0,     0,     0,     0,
     0,   196,   197,   198,   199,   200,    12,   176,     0,   177,
     0,     0,     0,     0,   178,   179,   180,   181,   182,   183,
   184,     0,     0,   185,   186,     0,   187,    12,   176,     0,
   177,     0,     0,     0,     0,   178,   179,   180,   181,   182,
   183,   184,     0,     0,   185,   186,     0,   187,    12,   176,
     0,   177,     0,     0,     0,     0,   178,   179,   180,   181,
   182,   183,   184,     0,     0,   185,   186,     0,   187,     0,
     0,     0,     0,     0,   188,     0,   189,   190,   191,   192,
   193,   194,   195,   468,     0,     0,     0,     0,     0,     0,
   196,   197,   198,   199,   200,   188,     0,   189,   190,   191,
   192,   193,   194,   195,   477,     0,     0,     0,     0,     0,
     0,   196,   197,   198,   199,   200,   188,     0,   189,   190,
   191,   192,   193,   194,   195,   482,     0,     0,     0,     0,
     0,     0,   196,   197,   198,   199,   200,    12,   176,     0,
   177,     0,     0,     0,     0,   178,   179,   180,   181,   182,
   183,   184,     0,     0,   185,   186,     0,   187,    12,   176,
     0,   177,     0,     0,     0,     0,   178,   179,   180,   181,
   182,   183,   184,     0,     0,   185,   186,     0,   187,    12,
   176,     0,   177,     0,     0,     0,     0,   178,   179,   180,
   181,   182,   183,   184,     0,     0,   185,   186,     0,   187,
     0,     0,     0,     0,     0,   188,     0,   189,   190,   191,
   192,   193,   194,   195,   485,     0,     0,     0,     0,     0,
     0,   196,   197,   198,   199,   200,   188,     0,   189,   190,
   191,   192,   193,   194,   195,   492,     0,     0,     0,     0,
     0,     0,   196,   197,   198,   199,   200,   188,     0,   189,
   190,   191,   192,   193,   194,   195,     0,     0,     0,     0,
     0,     0,     0,   196,   197,   198,   199,   200,    12,     0,
     0,   177,     0,     0,     0,     0,   178,   179,   180,   181,
   182,   183,   184,     0,     0,   185,   186,     0,   187,    12,
     0,     0,   177,     0,     0,     0,     0,   178,   179,   180,
   181,   182,   183,   184,     0,     0,   185,   186,     0,   187,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,     0,   189,   190,
   191,   192,   193,   194,   286,     0,   289,     0,     0,     0,
     0,     0,   196,   197,   198,   199,   200,   188,     0,   189,
   190,   191,   192,   193,   194,   286,     0,     0,     0,     0,
     0,     0,     0,   196,   197,   198,   199,   200,     1,     2,
     3,     4,     5,     6,     7,     8,     9,     0,    10,    11,
    12,     0,    13,     0,    14,    15,    16,    17,     0,     0,
     0,     0,     0,     0,     0,    18,    19,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,    10,    11,    12,
     0,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
    31,    20,    21,    22,    23,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    31
};

static const short yycheck[] = {     0,
    35,    77,     0,    40,   205,   138,   135,   168,    81,     0,
   138,   139,    55,   169,   163,    58,    15,    33,   189,   226,
    82,   442,    15,    15,    98,    18,    15,   188,    41,    42,
    31,    15,    33,   137,   195,    98,    80,   111,    17,    40,
    98,    84,    40,   172,   173,    20,   109,    98,   110,    40,
    87,   472,    15,   111,    55,    18,    72,    58,   109,    98,
    92,    17,    15,   167,    17,    18,    98,   238,    94,    92,
   109,    72,    98,   201,    98,    98,    15,   226,    17,    18,
    93,    94,    15,    84,    98,   109,    87,    29,    89,    87,
   142,    89,    85,    85,    29,   109,    87,    91,    89,    85,
   173,    95,    98,   231,    92,   306,   307,   308,    61,    92,
    98,   110,    91,   109,   109,    98,    95,   154,   155,   247,
    99,   100,    61,   160,   285,    91,   282,    98,   289,    95,
   291,    15,   100,    17,    18,    91,   104,   105,   139,    95,
   141,   110,   231,    99,   100,    92,    99,   100,   224,   110,
   141,    98,   168,   154,   155,   284,   154,   155,   110,   160,
    99,   100,   160,   154,   155,   372,   110,   168,   169,   160,
    92,    18,   188,   225,   302,    92,    98,    61,   169,   195,
   381,    98,    92,    92,   236,   237,   335,   188,    98,    98,
   313,   314,   315,   316,   195,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    92,    13,    14,    15,    94,    93,
    98,    15,    98,   265,    18,    99,   100,    32,    33,    34,
    99,   100,   300,   372,   259,   268,   304,   109,   356,    15,
   231,   108,    18,   110,   435,    15,   364,   238,    18,     5,
     6,     7,     8,     9,    10,    11,   247,    13,    14,    98,
    15,   303,    67,    18,   382,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    15,    96,   268,    98,   285,
   185,   186,   187,   289,   111,   291,    91,    85,    99,   100,
    95,   282,    97,    15,   285,    93,   109,    96,   289,    98,
   291,   282,   344,   345,   346,   428,   348,    96,   109,    98,
   428,     3,     4,     5,     6,     7,     8,     9,    10,    11,
   108,    13,    14,    15,   442,    96,   108,    95,   446,   447,
   448,    98,   101,   102,    39,    40,    43,    44,   309,   310,
    18,   368,   108,   311,   312,   317,   318,   465,     1,     2,
   468,   110,    93,   111,   472,    99,   474,   348,   106,   477,
   348,   107,    45,   481,   482,    46,    85,   446,   447,   448,
    85,   362,    29,   491,   492,   112,   110,   368,   496,   385,
   368,   362,   424,   501,   112,    91,   465,   368,    91,   468,
    91,    91,    18,    85,   385,   474,   109,   109,   477,    92,
   111,    98,   481,   482,   108,    92,    18,   449,    92,   451,
   452,   109,   491,   492,    93,   457,   111,   496,    98,   109,
   111,   487,   501,   111,   466,   111,   111,    37,   470,    73,
   112,    98,   109,   108,    92,   460,    92,   479,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    94,    13,    14,
    15,    94,    17,   444,    94,   446,   447,   448,    91,    91,
   109,   111,    91,   444,    92,    71,    91,   109,    92,    92,
     0,     0,   319,   321,   465,   320,   322,   468,    33,   323,
    81,   385,   362,   474,   173,   382,   477,   135,   415,    89,
   481,   482,    57,    58,    59,    60,   247,    94,    -1,    -1,
   491,   492,    -1,   268,    -1,   496,    -1,    -1,    -1,    -1,
   501,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    85,    13,    14,    15,    16,    17,    18,    92,    -1,    -1,
    -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
    32,    33,    -1,    35,    36,    -1,    38,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
    -1,    17,    -1,    -1,    -1,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
    -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    -1,    57,    58,    59,    60,    -1,    -1,    99,   100,   101,
   102,   103,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    85,
    13,    14,    15,    16,    17,    18,    92,    -1,    -1,    -1,
    23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
    33,    -1,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    72,
    73,    74,    75,    76,    77,    78,    79,    -1,    -1,    -1,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
    -1,    98,    -1,    -1,    -1,    -1,    99,   100,   101,   102,
   103,   108,    -1,    -1,    -1,    -1,   109,   110,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
    15,    16,    17,    18,    -1,    -1,    -1,    -1,    23,    24,
    25,    26,    27,    28,    29,    -1,    -1,    32,    33,    -1,
    35,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    -1,    13,    14,    15,    16,
    -1,    18,    57,    58,    59,    60,    23,    24,    25,    26,
    27,    28,    29,    -1,    -1,    32,    33,    -1,    35,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,
    85,    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    99,   100,   101,   102,   103,    -1,
    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,   102,   103,    15,    16,    -1,
    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
    28,    29,    -1,    -1,    32,    33,    -1,    35,    -1,    -1,
    -1,    -1,    -1,    15,    16,    -1,    18,    -1,    -1,    -1,
    -1,    23,    24,    25,    26,    27,    28,    29,    -1,    -1,
    32,    33,    -1,    35,    -1,    -1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    -1,    13,    14,    15,    -1,
    17,    -1,    -1,    -1,    -1,    83,    -1,    85,    86,    87,
    88,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
    -1,    83,   110,    85,    86,    87,    88,    89,    90,    91,
    57,    58,    59,    60,    -1,    -1,    -1,    99,   100,   101,
   102,   103,    15,    16,    -1,    18,    -1,   109,    -1,    -1,
    23,    24,    25,    26,    27,    28,    29,    -1,    85,    32,
    33,    -1,    35,    -1,    -1,    92,    -1,    15,    16,    -1,
    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
    28,    29,    -1,    -1,    32,    33,    -1,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    83,    -1,    85,    86,    87,    88,    89,    90,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,    83,   109,    85,    86,    87,
    88,    89,    90,    91,    -1,    -1,    16,    -1,    -1,    -1,
    -1,    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
    -1,   109,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    15,    16,    -1,
    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
    28,    29,    -1,    -1,    32,    33,    -1,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    -1,    -1,    93,    94,    95,    -1,    97,    -1,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   100,   101,   102,   103,    15,    16,    -1,    18,
    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
    29,    -1,    -1,    32,    33,    -1,    35,    15,    16,    -1,
    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
    28,    29,    -1,    -1,    32,    33,    -1,    35,    15,    16,
    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
    27,    28,    29,    -1,    -1,    32,    33,    -1,    35,    -1,
    -1,    -1,    -1,    -1,    83,    -1,    85,    86,    87,    88,
    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
    99,   100,   101,   102,   103,    83,    -1,    85,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   100,   101,   102,   103,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,   102,   103,    15,    16,    -1,
    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
    28,    29,    -1,    -1,    32,    33,    -1,    35,    15,    16,
    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
    27,    28,    29,    -1,    -1,    32,    33,    -1,    35,    15,
    16,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
    26,    27,    28,    29,    -1,    -1,    32,    33,    -1,    35,
    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   100,   101,   102,   103,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,   102,   103,    83,    -1,    85,
    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    99,   100,   101,   102,   103,    15,    -1,
    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
    27,    28,    29,    -1,    -1,    32,    33,    -1,    35,    15,
    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
    26,    27,    28,    29,    -1,    -1,    32,    33,    -1,    35,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    -1,    93,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,   102,   103,    83,    -1,    85,
    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    99,   100,   101,   102,   103,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
    15,    -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    30,    31,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,    -1,
    85,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 186 "compiler.y"
{ ;
    break;}
case 2:
#line 190 "compiler.y"
{
		yyval.m_expr = make_id_expr( yyvsp[0].m_qualname ); ;
    break;}
case 3:
#line 192 "compiler.y"
{
		yyval.m_expr = parse_hex_const( yyvsp[0].m_text ); ;
    break;}
case 4:
#line 194 "compiler.y"
{
		yyval.m_expr = parse_bin_const( yyvsp[0].m_text ); ;
    break;}
case 5:
#line 196 "compiler.y"
{
		yyval.m_expr = parse_oct_const( yyvsp[0].m_text ); ;
    break;}
case 6:
#line 198 "compiler.y"
{
		yyval.m_expr = parse_int_const( yyvsp[0].m_text ); ;
    break;}
case 7:
#line 200 "compiler.y"
{
		yyval.m_expr = parse_chr_const( yyvsp[0].m_text ); ;
    break;}
case 8:
#line 202 "compiler.y"
{
		yyval.m_expr = parse_flt_const( yyvsp[0].m_text ); ;
    break;}
case 9:
#line 204 "compiler.y"
{
		yyval.m_expr = make_str_expr( yyvsp[0].m_text ); ;
    break;}
case 10:
#line 206 "compiler.y"
{
		yyval.m_expr = make_null_expr(); ;
    break;}
case 11:
#line 208 "compiler.y"
{
		yyval.m_expr = make_this_expr(); ;
    break;}
case 12:
#line 210 "compiler.y"
{
		yyval.m_expr = make_iconst_expr( 1, make_type( TYPE_BOOL ) ); ;
    break;}
case 13:
#line 212 "compiler.y"
{
		yyval.m_expr = make_iconst_expr( 0, make_type( TYPE_BOOL ) ); ;
    break;}
case 14:
#line 214 "compiler.y"
{
		yyval.m_expr = yyvsp[-1].m_expr; ;
    break;}
case 15:
#line 216 "compiler.y"
{
		yyval.m_expr = make_new_expr( yyvsp[0].m_type ); ;
    break;}
case 16:
#line 218 "compiler.y"
{
		yyval.m_expr = make_dtnew_expr( yyvsp[-4].m_type, yyvsp[-1].m_expr ); ;
    break;}
case 17:
#line 223 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 18:
#line 225 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_ACCESS_ARRAY, yyvsp[-3].m_expr, yyvsp[-1].m_expr ); ;
    break;}
case 19:
#line 227 "compiler.y"
{
		yyval.m_expr = make_func_expr( 0, yyvsp[-2].m_expr, 0 ); ;
    break;}
case 20:
#line 229 "compiler.y"
{
		yyval.m_expr = make_func_expr( 0, yyvsp[-3].m_expr, yyvsp[-1].m_expr ); ;
    break;}
case 21:
#line 231 "compiler.y"
{
		yyval.m_expr = make_tmpl_func_expr( 0, yyvsp[-3].m_type_seq, yyvsp[-6].m_expr, 0 ); ;
    break;}
case 22:
#line 233 "compiler.y"
{
		yyval.m_expr = make_tmpl_func_expr( 0, yyvsp[-4].m_type_seq, yyvsp[-7].m_expr, yyvsp[-1].m_expr ); ;
    break;}
case 23:
#line 235 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_ACCESS_DOT, yyvsp[-2].m_expr, make_id_expr( yyvsp[0].m_qualname ) ); ;
    break;}
case 24:
#line 237 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_ACCESS_PTR, yyvsp[-2].m_expr, make_id_expr( yyvsp[0].m_qualname ) ); ;
    break;}
case 25:
#line 239 "compiler.y"
{
		yyval.m_expr = make_unary_expr( EXPR_POSTINC, yyvsp[-1].m_expr ); ;
    break;}
case 26:
#line 241 "compiler.y"
{
		yyval.m_expr = make_unary_expr( EXPR_POSTDEC, yyvsp[-1].m_expr ); ;
    break;}
case 27:
#line 246 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 28:
#line 248 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_COMMA, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 30:
#line 254 "compiler.y"
{
		yyval.m_expr = make_unary_expr( EXPR_PREINC, yyvsp[0].m_expr ); ;
    break;}
case 31:
#line 256 "compiler.y"
{
		yyval.m_expr = make_unary_expr( EXPR_PREDEC, yyvsp[0].m_expr ); ;
    break;}
case 32:
#line 258 "compiler.y"
{
		if( yyvsp[-1].m_expr_code != EXPR_NOP ) { yyval.m_expr = make_unary_expr( yyvsp[-1].m_expr_code, yyvsp[0].m_expr ); }
		else { yyval.m_expr = yyvsp[0].m_expr; } ;
    break;}
case 33:
#line 261 "compiler.y"
{
		type_t* sizeoftype = make_int_type( TYPE_LONG, false );
		expr_t* expr = make_unary_expr( EXPR_SIZEOF, yyvsp[0].m_expr );
		expr->type = sizeoftype; yyval.m_expr = expr; ;
    break;}
case 34:
#line 265 "compiler.y"
{
		expr_t* childexpr = make_iconst_expr( 0, yyvsp[-1].m_type );
		type_t* sizeoftype = make_int_type( TYPE_LONG, false );
		expr_t* expr = make_unary_expr( EXPR_SIZEOF, childexpr );
		expr->type = sizeoftype; yyval.m_expr = expr; ;
    break;}
case 35:
#line 273 "compiler.y"
{
		yyval.m_expr_code = EXPR_ADDRESS_OF; ;
    break;}
case 36:
#line 275 "compiler.y"
{
		yyval.m_expr_code = EXPR_DEREFERENCE; ;
    break;}
case 37:
#line 277 "compiler.y"
{
		yyval.m_expr_code = EXPR_NOP; ;
    break;}
case 38:
#line 279 "compiler.y"
{
		yyval.m_expr_code = EXPR_NEGATE; ;
    break;}
case 39:
#line 281 "compiler.y"
{
		yyval.m_expr_code = EXPR_BITWISE_NOT; ;
    break;}
case 40:
#line 283 "compiler.y"
{
		yyval.m_expr_code = EXPR_LOGICAL_NOT; ;
    break;}
case 41:
#line 288 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 42:
#line 290 "compiler.y"
{
		type_t* type = yyvsp[-2].m_type;
		expr_t* expr = make_unary_expr( EXPR_TYPECAST, yyvsp[0].m_expr );
		expr->type = type; yyval.m_expr = expr; ;
    break;}
case 43:
#line 294 "compiler.y"
{
		type_t* type = yyvsp[-2].m_type;
		expr_t* expr = make_unary_expr( EXPR_TYPECAST, yyvsp[0].m_expr );
		expr->type = type; yyval.m_expr = expr; ;
    break;}
case 44:
#line 301 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 45:
#line 303 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_MUL, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 46:
#line 305 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_DIV, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 47:
#line 307 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_MOD, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 48:
#line 312 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 49:
#line 314 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_ADD, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 50:
#line 316 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_SUB, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 51:
#line 321 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 52:
#line 323 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_SHL, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 53:
#line 325 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_SHR, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 54:
#line 330 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 55:
#line 332 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_LT, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 56:
#line 334 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_GT, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 57:
#line 336 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_LE, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 58:
#line 338 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_GE, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 59:
#line 343 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 60:
#line 345 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_EQ, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 61:
#line 347 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_NE, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 62:
#line 352 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 63:
#line 354 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_BITWISE_AND, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 64:
#line 359 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 65:
#line 361 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_BITWISE_XOR, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 66:
#line 366 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 67:
#line 368 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_BITWISE_OR, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 68:
#line 373 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 69:
#line 375 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_LOGICAL_AND, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 70:
#line 380 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 71:
#line 382 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_LOGICAL_OR, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 72:
#line 393 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 73:
#line 395 "compiler.y"
{
		yyval.m_expr = make_binary_expr( yyvsp[-1].m_expr_code, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 74:
#line 400 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 75:
#line 413 "compiler.y"
{
		yyval.m_expr_code = EXPR_ASSIGN; ;
    break;}
case 76:
#line 415 "compiler.y"
{
		yyval.m_expr_code = EXPR_MUL_ASSIGN; ;
    break;}
case 77:
#line 417 "compiler.y"
{
		yyval.m_expr_code = EXPR_DIV_ASSIGN; ;
    break;}
case 78:
#line 419 "compiler.y"
{
		yyval.m_expr_code = EXPR_MOD_ASSIGN; ;
    break;}
case 79:
#line 421 "compiler.y"
{
		yyval.m_expr_code = EXPR_ADD_ASSIGN; ;
    break;}
case 80:
#line 423 "compiler.y"
{
		yyval.m_expr_code = EXPR_SUB_ASSIGN; ;
    break;}
case 81:
#line 425 "compiler.y"
{
		yyval.m_expr_code = EXPR_SHL_ASSIGN; ;
    break;}
case 82:
#line 427 "compiler.y"
{
		yyval.m_expr_code = EXPR_SHR_ASSIGN; ;
    break;}
case 83:
#line 429 "compiler.y"
{
		yyval.m_expr_code = EXPR_AND_ASSIGN; ;
    break;}
case 84:
#line 431 "compiler.y"
{
		yyval.m_expr_code = EXPR_XOR_ASSIGN; ;
    break;}
case 85:
#line 433 "compiler.y"
{
		yyval.m_expr_code = EXPR_OR_ASSIGN; ;
    break;}
case 86:
#line 438 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 87:
#line 440 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_COMMA, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 88:
#line 445 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 89:
#line 447 "compiler.y"
{
		yyval.m_expr = make_binary_expr( EXPR_COMMA, yyvsp[-2].m_expr, yyvsp[0].m_expr ); ;
    break;}
case 90:
#line 449 "compiler.y"
{
		yyval.m_expr = make_delete_expr( yyvsp[0].m_expr ); ;
    break;}
case 91:
#line 454 "compiler.y"
{
		yyval.m_expr = yyvsp[0].m_expr; ;
    break;}
case 92:
#line 459 "compiler.y"
{
		yyval.m_type = yyvsp[0].m_type; ;
    break;}
case 93:
#line 461 "compiler.y"
{
		decl_spec_t* spec = make_decl_spec( yyvsp[-1].m_type, 0 );
		decl_t* decl = yyvsp[0].m_decl;
		decl->spec = spec;
		if( finish_decl( decl, false ) )
			yyval.m_type = decl->type;
		else
			yyval.m_type = make_type( TYPE_NONE ); ;
    break;}
case 94:
#line 472 "compiler.y"
{
		yyval.m_type_seq = make_type_seq( 0, yyvsp[0].m_type ); ;
    break;}
case 95:
#line 474 "compiler.y"
{
		yyvsp[-2].m_type_seq->next = make_type_seq( 0, yyvsp[0].m_type );
		yyval.m_type_seq = yyvsp[-2].m_type_seq; ;
    break;}
case 96:
#line 480 "compiler.y"
{
		decl_t* decl = yyvsp[-1].m_decl;
		yyval.m_decl = decl;
		decl_spec_t* spec = yyvsp[-2].m_decl_spec;
		while( decl ) {
			decl->spec = spec;
			decl = decl->next;
		} ;
    break;}
case 97:
#line 488 "compiler.y"
{
		decl_t* decl = yyvsp[-1].m_decl;
		decl->tmpltype = yyvsp[-3].m_type_seq;
		yyval.m_decl = decl;
		decl_spec_t* spec = yyvsp[-5].m_decl_spec;
		while( decl ) {
			decl->spec = spec;
			decl = decl->next;
		} ;
    break;}
case 98:
#line 500 "compiler.y"
{
		yyval.m_flags = yyvsp[0].m_flags; ;
    break;}
case 99:
#line 502 "compiler.y"
{
		yyval.m_flags = union_flags( yyvsp[-1].m_flags, yyvsp[0].m_flags ); ;
    break;}
case 100:
#line 507 "compiler.y"
{
		yyval.m_flags = MOD_TYPEDEF; ;
    break;}
case 101:
#line 509 "compiler.y"
{
		yyval.m_flags = MOD_STATIC; ;
    break;}
case 102:
#line 511 "compiler.y"
{
		yyval.m_flags = MOD_CONST; ;
    break;}
case 103:
#line 513 "compiler.y"
{
		yyval.m_flags = MOD_NATIVE; ;
    break;}
case 104:
#line 515 "compiler.y"
{
		yyval.m_flags = MOD_ABSTRACT; ;
    break;}
case 105:
#line 520 "compiler.y"
{
		yyval.m_decl_spec = make_decl_spec( yyvsp[0].m_type, yyvsp[-1].m_flags ); ;
    break;}
case 106:
#line 522 "compiler.y"
{
		yyval.m_decl_spec = make_decl_spec( yyvsp[0].m_type, 0 ); ;
    break;}
case 107:
#line 527 "compiler.y"
{
		yyval.m_decl = yyvsp[0].m_decl; ;
    break;}
case 108:
#line 529 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl;
		decl->next = yyvsp[0].m_decl;
		yyval.m_decl = decl; ;
    break;}
case 109:
#line 536 "compiler.y"
{
		yyval.m_decl = yyvsp[0].m_decl; ;
    break;}
case 110:
#line 538 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl;
		decl->init = yyvsp[0].m_decl_init;
		yyval.m_decl = decl; ;
    break;}
case 111:
#line 546 "compiler.y"
{
		yyval.m_type = make_type( TYPE_VOID ); ;
    break;}
case 112:
#line 548 "compiler.y"
{
		yyval.m_type = make_type( TYPE_BOOL ); ;
    break;}
case 113:
#line 550 "compiler.y"
{
		yyval.m_type = make_int_type( TYPE_BYTE, false ); ;
    break;}
case 114:
#line 552 "compiler.y"
{
		yyval.m_type = make_int_type( TYPE_CHAR, true ); ;
    break;}
case 115:
#line 554 "compiler.y"
{
		yyval.m_type = make_int_type( TYPE_SHORT, true ); ;
    break;}
case 116:
#line 556 "compiler.y"
{
		yyval.m_type = make_int_type( TYPE_INT, true ); ;
    break;}
case 117:
#line 558 "compiler.y"
{
		yyval.m_type = make_int_type( TYPE_LONG, true ); ;
    break;}
case 118:
#line 560 "compiler.y"
{
		yyval.m_type = make_type( TYPE_FLOAT ); ;
    break;}
case 119:
#line 562 "compiler.y"
{
		yyval.m_type = make_type( TYPE_DOUBLE ); ;
    break;}
case 120:
#line 567 "compiler.y"
{
		yyval.m_qualname = make_qualname( yyvsp[0].m_text ); ;
    break;}
case 121:
#line 569 "compiler.y"
{
		qualname_t* downname;
		downname = make_qualname( yyvsp[0].m_text );
		qualname_t* oldname = yyvsp[-2].m_qualname;
		oldname->down = downname;
		yyval.m_qualname = oldname; ;
    break;}
case 122:
#line 575 "compiler.y"
{
		 qualname_t* downname;
		downname = make_qualname( yyvsp[0].m_text );
		qualname_t* oldname = yyvsp[-2].m_qualname;
		oldname->down = downname;
		yyval.m_qualname = oldname; ;
    break;}
case 123:
#line 584 "compiler.y"
{
		qualname_t* name = yyvsp[0].m_qualname;
		name->scope = 0;
		yyval.m_qualname = name; ;
    break;}
case 124:
#line 588 "compiler.y"
{
		qualname_t* name = yyvsp[0].m_qualname;
		name->scope = global_scope();
		yyval.m_qualname = name; ;
    break;}
case 125:
#line 595 "compiler.y"
{
		yyval.m_qualname = make_qualname( yyvsp[0].m_text ); ;
    break;}
case 126:
#line 597 "compiler.y"
{
		qualname_t* downname;
		downname = make_qualname( yyvsp[0].m_text );
		qualname_t* oldname = yyvsp[-2].m_qualname;
		oldname->down = downname;
		yyval.m_qualname = oldname; ;
    break;}
case 127:
#line 606 "compiler.y"
{
		qualname_t* name = yyvsp[0].m_qualname;
		name->scope = cur_scope();
		yyval.m_qualname = name; ;
    break;}
case 128:
#line 610 "compiler.y"
{
		qualname_t* name = yyvsp[0].m_qualname;
		name->scope = global_scope();
		yyval.m_qualname = name; ;
    break;}
case 129:
#line 617 "compiler.y"
{
		type_t* type = yyvsp[0].m_type;
		yyval.m_type = type; ;
    break;}
case 130:
#line 620 "compiler.y"
{
		type_t* type = yyvsp[0].m_type;
		if( !is_type_integral( type ) )
			compile_error( 0, ERR_SYNTAX_ERROR );
		( (int_type_t*)type )->is_signed = true;
		yyval.m_type = type; ;
    break;}
case 131:
#line 626 "compiler.y"
{
		type_t* type = yyvsp[0].m_type;
		if( !is_type_integral( type ) )
			compile_error( 0, ERR_SYNTAX_ERROR );
		( (int_type_t*)type )->is_signed = false;
		yyval.m_type = type; ;
    break;}
case 132:
#line 632 "compiler.y"
{
		yyval.m_type = make_unresolved_type( yyvsp[0].m_qualname ); ;
    break;}
case 133:
#line 637 "compiler.y"
{
		decl_t* decl = yyvsp[0].m_decl;
		decl->prefix = yyvsp[-1].m_type;
		yyval.m_decl = decl; ;
    break;}
case 134:
#line 641 "compiler.y"
{
		decl_t* decl = make_decl( "" );
		decl->prefix = yyvsp[0].m_type;
		yyval.m_decl = decl; ;
    break;}
case 135:
#line 645 "compiler.y"
{
		yyval.m_decl = yyvsp[0].m_decl; ;
    break;}
case 136:
#line 650 "compiler.y"
{
		yyval.m_text = "#[]"; ;
    break;}
case 137:
#line 652 "compiler.y"
{
		yyval.m_text = "#."; ;
    break;}
case 138:
#line 654 "compiler.y"
{
		yyval.m_text = "#&"; ;
    break;}
case 139:
#line 656 "compiler.y"
{
		yyval.m_text = "#!"; ;
    break;}
case 140:
#line 658 "compiler.y"
{
		yyval.m_text = "#&&"; ;
    break;}
case 141:
#line 660 "compiler.y"
{
		yyval.m_text = "#||"; ;
    break;}
case 142:
#line 662 "compiler.y"
{
		yyval.m_text = "#~"; ;
    break;}
case 143:
#line 664 "compiler.y"
{
		yyval.m_text = "#^"; ;
    break;}
case 144:
#line 666 "compiler.y"
{
		yyval.m_text = "#|"; ;
    break;}
case 145:
#line 668 "compiler.y"
{
		yyval.m_text = "#+"; ;
    break;}
case 146:
#line 670 "compiler.y"
{
		yyval.m_text = "#-"; ;
    break;}
case 147:
#line 672 "compiler.y"
{
		yyval.m_text = "#*"; ;
    break;}
case 148:
#line 674 "compiler.y"
{
		yyval.m_text = "#/"; ;
    break;}
case 149:
#line 676 "compiler.y"
{
		yyval.m_text = "#%"; ;
    break;}
case 150:
#line 678 "compiler.y"
{
		yyval.m_text = "#<<"; ;
    break;}
case 151:
#line 680 "compiler.y"
{
		yyval.m_text = "#>>"; ;
    break;}
case 152:
#line 682 "compiler.y"
{
		yyval.m_text = "#<"; ;
    break;}
case 153:
#line 684 "compiler.y"
{
		yyval.m_text = "#>"; ;
    break;}
case 154:
#line 686 "compiler.y"
{
		yyval.m_text = "#<="; ;
    break;}
case 155:
#line 688 "compiler.y"
{
		yyval.m_text = "#>="; ;
    break;}
case 156:
#line 690 "compiler.y"
{
		yyval.m_text = "#=="; ;
    break;}
case 157:
#line 692 "compiler.y"
{
		yyval.m_text = "#!="; ;
    break;}
case 158:
#line 694 "compiler.y"
{
		yyval.m_text = "#="; ;
    break;}
case 159:
#line 696 "compiler.y"
{
		yyval.m_text = "#*="; ;
    break;}
case 160:
#line 698 "compiler.y"
{
		yyval.m_text = "#/="; ;
    break;}
case 161:
#line 700 "compiler.y"
{
		yyval.m_text = "#%="; ;
    break;}
case 162:
#line 702 "compiler.y"
{
		yyval.m_text = "#+="; ;
    break;}
case 163:
#line 704 "compiler.y"
{
		yyval.m_text = "#-="; ;
    break;}
case 164:
#line 706 "compiler.y"
{
		yyval.m_text = "#<<="; ;
    break;}
case 165:
#line 708 "compiler.y"
{
		yyval.m_text = "#>>="; ;
    break;}
case 166:
#line 710 "compiler.y"
{
		yyval.m_text = "#&="; ;
    break;}
case 167:
#line 712 "compiler.y"
{
		yyval.m_text = "#^="; ;
    break;}
case 168:
#line 714 "compiler.y"
{
		yyval.m_text = "#|="; ;
    break;}
case 169:
#line 716 "compiler.y"
{
		yyval.m_text = "#++"; ;
    break;}
case 170:
#line 718 "compiler.y"
{
		yyval.m_text = "#--"; ;
    break;}
case 171:
#line 720 "compiler.y"
{
		yyval.m_text = "#c"; ;
    break;}
case 172:
#line 725 "compiler.y"
{
		yyval.m_array_decl = make_array_decl( yyvsp[-1].m_expr ); ;
    break;}
case 173:
#line 727 "compiler.y"
{
		array_decl_t* decl = make_array_decl( yyvsp[-1].m_expr );
		array_decl_t* node = yyvsp[-3].m_array_decl; yyval.m_array_decl = node;
		array_decl_t* tail = node->tail;
		decl->up = tail;
		tail->down = decl;
		node->tail = decl; ;
    break;}
case 174:
#line 737 "compiler.y"
{
		yyval.m_decl = make_decl( yyvsp[0].m_text ); ;
    break;}
case 175:
#line 739 "compiler.y"
{
		yyval.m_decl = make_decl( yyvsp[0].m_text ); ;
    break;}
case 176:
#line 741 "compiler.y"
{
		yyval.m_decl = make_decl( yyvsp[0].m_text ); ;
    break;}
case 177:
#line 743 "compiler.y"
{
		yyval.m_decl = combine_array_decl( yyvsp[-1].m_decl, yyvsp[0].m_array_decl ); ;
    break;}
case 178:
#line 745 "compiler.y"
{
		decl_t* decl = yyvsp[-3].m_decl;
		decl->func = make_decl_func( yyvsp[-1].m_decl );
		yyval.m_decl = decl; ;
    break;}
case 179:
#line 749 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl;
		decl->func = make_decl_func( 0 );
		yyval.m_decl = decl; ;
    break;}
case 180:
#line 756 "compiler.y"
{
		decl_t* decl = make_decl( "" );
		decl->prefix = yyvsp[0].m_type;
		yyval.m_decl = decl; ;
    break;}
case 181:
#line 760 "compiler.y"
{
		yyval.m_decl = yyvsp[0].m_decl; ;
    break;}
case 182:
#line 762 "compiler.y"
{
		decl_t* decl = yyvsp[0].m_decl;
		decl->prefix = yyvsp[-1].m_type;
		yyval.m_decl = decl; ;
    break;}
case 183:
#line 769 "compiler.y"
{
		yyval.m_decl = combine_array_decl( make_decl( "" ), yyvsp[0].m_array_decl ); ;
    break;}
case 184:
#line 771 "compiler.y"
{
		yyval.m_decl = combine_array_decl( yyvsp[-1].m_decl, yyvsp[0].m_array_decl ); ;
    break;}
case 185:
#line 773 "compiler.y"
{
		decl_t* decl = make_decl( "" );
		decl->func = make_decl_func( yyvsp[-1].m_decl );
		yyval.m_decl = decl; ;
    break;}
case 186:
#line 777 "compiler.y"
{
		decl_t* decl = make_decl( "" );
		decl->func = make_decl_func( 0 );
		yyval.m_decl = decl; ;
    break;}
case 187:
#line 781 "compiler.y"
{
		decl_t* decl = yyvsp[-3].m_decl;
		decl->func = make_decl_func( yyvsp[-1].m_decl );
		yyval.m_decl = decl; ;
    break;}
case 188:
#line 785 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl;
		decl->func = make_decl_func( 0 );
		yyval.m_decl = decl; ;
    break;}
case 189:
#line 792 "compiler.y"
{
		yyval.m_qualifiers = TC_CONST; ;
    break;}
case 190:
#line 797 "compiler.y"
{
		yyval.m_type = make_ptr_type( 0, 0 ); ;
    break;}
case 191:
#line 799 "compiler.y"
{
		yyval.m_type = make_ptr_type( yyvsp[-1].m_type, 0 ); ;
    break;}
case 192:
#line 801 "compiler.y"
{
		yyval.m_type = make_ref_type( 0, 0 ); ;
    break;}
case 193:
#line 803 "compiler.y"
{
		yyval.m_type = make_ref_type( yyvsp[-1].m_type, 0 ); ;
    break;}
case 194:
#line 805 "compiler.y"
{
		yyval.m_type = make_ptr_type( 0, yyvsp[-1].m_qualifiers ); ;
    break;}
case 195:
#line 807 "compiler.y"
{
		yyval.m_type = make_ptr_type( yyvsp[-2].m_type, yyvsp[-1].m_qualifiers ); ;
    break;}
case 196:
#line 809 "compiler.y"
{
		yyval.m_type = make_ref_type( 0, yyvsp[-1].m_qualifiers ); ;
    break;}
case 197:
#line 811 "compiler.y"
{
		yyval.m_type = make_ref_type( yyvsp[-2].m_type, yyvsp[-1].m_qualifiers ); ;
    break;}
case 198:
#line 816 "compiler.y"
{
		yyval.m_decl = yyvsp[0].m_decl; ;
    break;}
case 199:
#line 821 "compiler.y"
{
		yyval.m_decl = yyvsp[0].m_decl; ;
    break;}
case 200:
#line 823 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl;
		decl->next = yyvsp[0].m_decl;
		yyval.m_decl = decl; ;
    break;}
case 201:
#line 830 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl;
		decl->spec = yyvsp[-3].m_decl_spec;
		decl->init = yyvsp[0].m_decl_init;
		yyval.m_decl = decl; ;
    break;}
case 202:
#line 835 "compiler.y"
{
		decl_t* decl = yyvsp[0].m_decl;
		decl->spec = yyvsp[-1].m_decl_spec;
		yyval.m_decl = decl; ;
    break;}
case 203:
#line 839 "compiler.y"
{
		decl_t* decl = make_decl( "" );
		decl->spec = yyvsp[0].m_decl_spec;
		yyval.m_decl = decl; ;
    break;}
case 204:
#line 846 "compiler.y"
{
		expr_t* expr = yyvsp[0].m_expr;
		decl_init_t* init = make_decl_init();
		init->expr = expr;
		yyval.m_decl_init = init; ;
    break;}
case 205:
#line 851 "compiler.y"
{
		decl_init_t* init = make_decl_init();
		init->list = yyvsp[-1].m_decl_init;
		yyval.m_decl_init = init; ;
    break;}
case 206:
#line 858 "compiler.y"
{
		yyval.m_decl_init = yyvsp[0].m_decl_init; ;
    break;}
case 207:
#line 860 "compiler.y"
{
		decl_init_t* init = yyvsp[-2].m_decl_init;
		init->next = yyvsp[0].m_decl_init;
		yyval.m_decl_init = init;
		;
    break;}
case 208:
#line 868 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 209:
#line 870 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 210:
#line 872 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 211:
#line 874 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 212:
#line 876 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 213:
#line 878 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 214:
#line 880 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 215:
#line 882 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 216:
#line 884 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 217:
#line 886 "compiler.y"
{
		compile_setting( yyvsp[-1].m_text );
		yyval.m_stmt = 0; ;
    break;}
case 218:
#line 892 "compiler.y"
{
		decl_t* decl = yyvsp[-2].m_decl; decl->spec = yyvsp[-3].m_decl_spec;
		yyval.m_stmt = make_catch_stmt( decl, yyvsp[0].m_stmt ); ;
    break;}
case 219:
#line 898 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 220:
#line 900 "compiler.y"
{
		stmt_t* stmt = yyvsp[-1].m_stmt; stmt->next = yyvsp[0].m_stmt; yyval.m_stmt = stmt; ;
    break;}
case 221:
#line 905 "compiler.y"
{
		yyval.m_stmt = make_try_stmt( yyvsp[-1].m_stmt, (catch_stmt_t*)yyvsp[0].m_stmt ); ;
    break;}
case 222:
#line 910 "compiler.y"
{
		yyval.m_stmt = make_throw_stmt( yyvsp[-1].m_expr ); ;
    break;}
case 223:
#line 915 "compiler.y"
{
		yyval.m_stmt = make_ident_stmt( STMT_LABEL, yyvsp[-1].m_text ); ;
    break;}
case 224:
#line 917 "compiler.y"
{
		yyval.m_stmt = make_case_stmt( yyvsp[-1].m_expr ); ;
    break;}
case 225:
#line 919 "compiler.y"
{
		yyval.m_stmt = make_stmt( STMT_DEFAULT ); ;
    break;}
case 226:
#line 924 "compiler.y"
{
		yyval.m_stmt = make_stmt( STMT_NOP ); ;
    break;}
case 227:
#line 926 "compiler.y"
{
		yyval.m_stmt = make_block_stmt( yyvsp[-1].m_stmt ); ;
    break;}
case 228:
#line 931 "compiler.y"
{
		yyval.m_stmt = yyvsp[0].m_stmt; ;
    break;}
case 229:
#line 933 "compiler.y"
{
		stmt_t* stmt = yyvsp[-1].m_stmt;
		stmt->next = yyvsp[0].m_stmt;
		yyval.m_stmt = stmt; ;
    break;}
case 230:
#line 940 "compiler.y"
{
		yyval.m_stmt = make_stmt( STMT_NOP ); ;
    break;}
case 231:
#line 942 "compiler.y"
{
		yyval.m_stmt = make_expr_stmt( STMT_EXPR, yyvsp[-1].m_expr ); ;
    break;}
case 232:
#line 947 "compiler.y"
{
		yyval.m_stmt = parse_if_stmt( yyvsp[-2].m_expr, yyvsp[0].m_stmt, 0 ); ;
    break;}
case 233:
#line 949 "compiler.y"
{
		yyval.m_stmt = parse_if_stmt( yyvsp[-4].m_expr, yyvsp[-2].m_stmt, yyvsp[0].m_stmt ); ;
    break;}
case 234:
#line 951 "compiler.y"
{
		yyval.m_stmt = parse_cond_stmt( STMT_SWITCH, yyvsp[-2].m_expr, yyvsp[0].m_stmt ); ;
    break;}
case 235:
#line 956 "compiler.y"
{
		yyval.m_stmt = parse_cond_stmt( STMT_WHILE, yyvsp[-2].m_expr, yyvsp[0].m_stmt ); ;
    break;}
case 236:
#line 958 "compiler.y"
{
		yyval.m_stmt = parse_cond_stmt( STMT_DO, yyvsp[-2].m_expr, yyvsp[-5].m_stmt ); ;
    break;}
case 237:
#line 960 "compiler.y"
{
		yyval.m_stmt = parse_expr_for_stmt( 0, 0, 0, yyvsp[0].m_stmt ); ;
    break;}
case 238:
#line 962 "compiler.y"
{
		yyval.m_stmt = parse_expr_for_stmt( yyvsp[-4].m_expr, 0, 0, yyvsp[0].m_stmt ); ;
    break;}
case 239:
#line 964 "compiler.y"
{
		yyval.m_stmt = parse_expr_for_stmt( yyvsp[-5].m_expr, 0, yyvsp[-2].m_expr, yyvsp[0].m_stmt ); ;
    break;}
case 240:
#line 966 "compiler.y"
{
		yyval.m_stmt = parse_expr_for_stmt( yyvsp[-5].m_expr, yyvsp[-3].m_expr, 0, yyvsp[0].m_stmt ); ;
    break;}
case 241:
#line 968 "compiler.y"
{
		yyval.m_stmt = parse_expr_for_stmt( yyvsp[-6].m_expr, yyvsp[-4].m_expr, yyvsp[-2].m_expr, yyvsp[0].m_stmt ); ;
    break;}
case 242:
#line 970 "compiler.y"
{
		yyval.m_stmt = parse_decl_for_stmt( yyvsp[-3].m_decl, 0, 0, yyvsp[0].m_stmt ); ;
    break;}
case 243:
#line 972 "compiler.y"
{
		yyval.m_stmt = parse_decl_for_stmt( yyvsp[-4].m_decl, 0, yyvsp[-2].m_expr, yyvsp[0].m_stmt ); ;
    break;}
case 244:
#line 974 "compiler.y"
{
		yyval.m_stmt = parse_decl_for_stmt( yyvsp[-4].m_decl, yyvsp[-3].m_expr, 0, yyvsp[0].m_stmt ); ;
    break;}
case 245:
#line 976 "compiler.y"
{
		yyval.m_stmt = parse_decl_for_stmt( yyvsp[-5].m_decl, yyvsp[-4].m_expr, yyvsp[-2].m_expr, yyvsp[0].m_stmt ); ;
    break;}
case 246:
#line 981 "compiler.y"
{
		yyval.m_stmt = make_ident_stmt( STMT_GOTO, yyvsp[-1].m_text ); ;
    break;}
case 247:
#line 983 "compiler.y"
{
		yyval.m_stmt = make_stmt( STMT_CONTINUE ); ;
    break;}
case 248:
#line 985 "compiler.y"
{
		yyval.m_stmt = make_stmt( STMT_BREAK ); ;
    break;}
case 249:
#line 987 "compiler.y"
{
		yyval.m_stmt = make_expr_stmt( STMT_RETURN, 0 ); ;
    break;}
case 250:
#line 989 "compiler.y"
{
		yyval.m_stmt = make_expr_stmt( STMT_RETURN, yyvsp[-1].m_expr ); ;
    break;}
case 251:
#line 994 "compiler.y"
{
		yyval.m_stmt = make_decl_stmt( yyvsp[0].m_decl ); ;
    break;}
case 253:
#line 1000 "compiler.y"
{
		parse_declaration( yyvsp[0].m_decl, 0, 0, false ); ;
    break;}
case 257:
#line 1005 "compiler.y"
{
		yyval.m_none = 0; ;
    break;}
case 258:
#line 1007 "compiler.y"
{
		compile_setting( yyvsp[-1].m_text );
		yyval.m_none = 0;
	;
    break;}
case 261:
#line 1019 "compiler.y"
{
		decl_t* decl = yyvsp[-1].m_decl;
		decl->spec = yyvsp[-2].m_decl_spec;
		parse_function( decl, yyvsp[0].m_stmt ); ;
    break;}
case 262:
#line 1026 "compiler.y"
{
		yyval.m_clss_spec = make_class_spec( yyvsp[0].m_text, ACC_PRIVATE ); ;
    break;}
case 263:
#line 1028 "compiler.y"
{
		yyval.m_clss_spec = make_class_spec( yyvsp[0].m_text, ACC_PUBLIC ); ;
    break;}
case 264:
#line 1030 "compiler.y"
{
		yyval.m_clss_spec = make_class_spec( yyvsp[0].m_text, ACC_PRIVATE );
		istring name( yyvsp[0].m_text ); make_type_name( name );
		compile_error( 0, ERR_ILLEGAL_TYPENAME, name.c_str(), yyvsp[0].m_text ); ;
    break;}
case 265:
#line 1034 "compiler.y"
{
		yyval.m_clss_spec = make_class_spec( yyvsp[0].m_text, ACC_PUBLIC );
		istring name( yyvsp[0].m_text ); make_type_name( name );
		compile_error( 0, ERR_ILLEGAL_TYPENAME, name.c_str(), yyvsp[0].m_text ); ;
    break;}
case 266:
#line 1041 "compiler.y"
{
		yyval.m_clss_spec = make_class_spec( yyvsp[0].m_text, ACC_PUBLIC ); ;
    break;}
case 267:
#line 1043 "compiler.y"
{
		yyval.m_clss_spec = make_class_spec( yyvsp[0].m_text, ACC_PUBLIC );
		istring name( yyvsp[0].m_text ); make_type_name( name );
		compile_error( 0, ERR_ILLEGAL_TYPENAME, name.c_str(), yyvsp[0].m_text ); ;
    break;}
case 268:
#line 1050 "compiler.y"
{
		yyval.m_qualhead = make_qualhead( yyvsp[0].m_qualname ); ;
    break;}
case 269:
#line 1052 "compiler.y"
{
		qualhead_t *qualhead = make_qualhead( yyvsp[-2].m_qualname );
		qualhead->next = yyvsp[0].m_qualhead;
		yyval.m_qualhead = qualhead; ;
    break;}
case 270:
#line 1059 "compiler.y"
{
		begin_class( yyvsp[-1].m_clss_spec, 0 ); ;
    break;}
case 271:
#line 1061 "compiler.y"
{
		end_class(); ;
    break;}
case 272:
#line 1063 "compiler.y"
{
		begin_class( yyvsp[-3].m_clss_spec, yyvsp[-1].m_qualhead ); ;
    break;}
case 273:
#line 1065 "compiler.y"
{
		end_class(); ;
    break;}
case 274:
#line 1067 "compiler.y"
{
		begin_class( yyvsp[-2].m_clss_spec, 0 ); end_class(); ;
    break;}
case 275:
#line 1069 "compiler.y"
{
		begin_class( yyvsp[-4].m_clss_spec, yyvsp[-2].m_qualhead ); end_class(); ;
    break;}
case 276:
#line 1071 "compiler.y"
{
		class_t* clss = begin_class( yyvsp[-1].m_clss_spec, 0 );
		scope_make_namespace( clss->scope ); ;
    break;}
case 277:
#line 1074 "compiler.y"
{
		end_class(); ;
    break;}
case 278:
#line 1076 "compiler.y"
{
		add_class_friend( yyvsp[-1].m_qualname ); ;
    break;}
case 279:
#line 1078 "compiler.y"
{
		fileref_t filepos; get_filepos( &filepos );
		scope_add_unresolved_using( cur_scope(), yyvsp[-1].m_qualname, &filepos ); ;
    break;}
case 280:
#line 1081 "compiler.y"
{
		scope_t* frame = cur_scope();
		class_spec_t* spec;
		class_t* clss;
		spec = make_class_spec(
			template_class_name(), ACC_PUBLIC );
		clss = begin_class( spec, 0 );
		scope_add_using( frame, clss->scope );
		scope_make_template( clss->scope, yyvsp[0].m_typename_list ); ;
    break;}
case 281:
#line 1090 "compiler.y"
{
		end_class(); ;
    break;}
case 282:
#line 1092 "compiler.y"
{
		scope_t* frame = cur_scope();
		class_spec_t* spec = make_class_spec( yyvsp[-1].m_text, ACC_PUBLIC );	
		class_t* clss = begin_class( spec, 0 );
		scope_add_using( frame, clss->scope );
		scope_make_dll( clss->scope ); ;
    break;}
case 283:
#line 1098 "compiler.y"
{
		end_class(); ;
    break;}
case 284:
#line 1103 "compiler.y"
{
		declare_scope_access( ACC_PUBLIC ); ;
    break;}
case 285:
#line 1105 "compiler.y"
{
		declare_scope_access( ACC_PRIVATE ); ;
    break;}
case 286:
#line 1107 "compiler.y"
{
		declare_scope_access( ACC_PROTECTED ); ;
    break;}
case 287:
#line 1112 "compiler.y"
{
		yyval.m_typename_list = make_typename_list( 0, yyvsp[0].m_text ); ;
    break;}
case 288:
#line 1114 "compiler.y"
{
		yyvsp[-2].m_typename_list->next = make_typename_list( 0, yyvsp[0].m_text ); yyval.m_typename_list = yyvsp[-2].m_typename_list; ;
    break;}
case 289:
#line 1119 "compiler.y"
{
		enum_list_t* list = make_enum_list(); yyval.m_enum_list = list;
		append_enumerator( list, yyvsp[0].m_text, 0 ); ;
    break;}
case 290:
#line 1122 "compiler.y"
{
		enum_list_t* list = make_enum_list(); yyval.m_enum_list = list;
		append_enumerator( list, yyvsp[-2].m_text, yyvsp[0].m_expr ); ;
    break;}
case 291:
#line 1125 "compiler.y"
{
		enum_list_t* list = yyvsp[-2].m_enum_list; yyval.m_enum_list = list;
		append_enumerator( list, yyvsp[0].m_text, 0 ); ;
    break;}
case 292:
#line 1128 "compiler.y"
{
		enum_list_t* list = yyvsp[-4].m_enum_list; yyval.m_enum_list = list;
		append_enumerator( list, yyvsp[-2].m_text, yyvsp[0].m_expr ); ;
    break;}
case 293:
#line 1134 "compiler.y"
{
		fileref_t filepos; get_filepos( &filepos );
		declare_enum( 0, yyvsp[-1].m_enum_list, &filepos ); ;
    break;}
case 294:
#line 1137 "compiler.y"
{
		fileref_t filepos; get_filepos( &filepos );
		declare_enum( yyvsp[-3].m_text, yyvsp[-1].m_enum_list, &filepos ); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1142 "compiler.y"

