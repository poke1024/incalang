// This file is part of incalang.

// incalang is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.

// incalang is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Foobar; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/incalang/incalang/development/source/packages/aklabeth/aklabeth_lexer.cpp,v 1.1 2004/10/09 11:15:31 mabinogion123 Exp $
 */

#include "code.h"
BEGIN_CODE_NAMESPACE
#define YY_SKIP_YYWRAP

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 126
#define YY_END_OF_BUFFER 127
static yyconst short int yy_accept[373] =
    {   0,
        0,    0,  127,   73,  126,  124,  123,  121,  122,  120,
      125,  126,   72,  106,  111,  126,   99,  100,  103,  107,
      117,  108,   79,  104,   66,   66,  115,  118,  109,  116,
      110,  114,   62,   97,  105,   98,  112,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,  101,  113,  102,  119,
       83,    0,   71,    0,   89,   84,   94,    0,    0,    2,
       87,   76,   90,   77,   91,   78,   69,    1,    3,   88,
       70,   65,    0,    0,   68,   66,   66,    0,   66,   86,
       75,   80,   82,   81,   74,   62,   95,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   35,   62,   62,   62,
       62,   62,   62,   62,   62,   31,   62,   62,   62,   62,
       62,   62,   62,   62,   59,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   96,   85,   67,    0,   69,   69,    0,   70,
       65,   65,   64,    0,   68,   63,   92,   93,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   36,   62,   62,   62,
       62,   11,   62,   62,   62,   62,   44,   48,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   54,   62,   62,   62,   62,   62,
       62,    0,   69,    0,   69,    0,   70,   64,   63,   62,
        6,   62,    7,   29,   49,   62,    8,   62,   62,   62,
       62,   62,   62,   62,   32,   53,   62,   62,   62,   62,
       37,   62,   62,   12,   62,   62,   62,   46,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       47,   62,   17,   62,   62,   62,   16,   62,   13,    0,
       69,   62,   39,   55,   42,   62,   21,   62,   62,   62,
       62,   62,   18,   10,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   14,   62,   62,   62,   62,

       62,   62,   56,   62,   62,   28,   34,   62,   62,   62,
       62,   45,    9,   62,   27,   62,   62,   51,   62,   22,
       62,   62,   62,   62,   40,    5,   15,   20,   41,   33,
       62,   62,   62,   62,   62,   62,   30,   43,   62,   50,
       62,   62,   62,   62,   24,   62,   19,   62,   23,   62,
       38,   62,   62,   52,   25,   62,   58,    4,   62,   62,
       57,   62,   62,   60,   26,   62,   62,   62,   62,   62,
       61,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    3,    4,    5,
        2,    6,    7,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    8,    9,   10,    2,    2,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,    2,   30,   31,   30,   30,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,    2,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   34,   52,   53,   54,   55,
       56,   57,   34,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    4,    4,    4,    4,    1,    1,    1,
        1,    4,    3,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[377] =
    {   0,
        0,    0,  511,  512,  512,  512,  512,  512,  512,  512,
      512,  483,   61,  482,   60,  469,  512,  512,   52,   57,
      512,   58,   53,   62,   81,  126,  483,  512,   54,  479,
       63,  512,    0,  512,  512,  512,  478,  460,   37,   55,
       41,   66,   79,  447,   72,  446,  445,   96,   58,   38,
      453,   73,  106,   85,  443,   59,  512,  104,  512,  512,
      512,  128,  512,  493,  512,  512,  512,  137,  142,  512,
      512,  512,  512,  512,  512,  512,  158,  512,  512,  512,
      162,  196,  143,  179,  512,  147,  177,    0,    0,  512,
      470,  512,  512,  512,  469,    0,  512,  436,  438,  446,

      432,  109,  448,  447,  123,  122,  428,  429,  426,  426,
      432,  428,  425,  431,  421,    0,  423,   47,  424,  432,
      100,  414,  416,  422,    0,  427,  148,  429,  412,  415,
      137,  149,  419,  415,  163,  159,  411,  408,  415,  414,
      413,  417,  512,  512,  512,  217,  512,  219,  236,  512,
      210,  212,  239,  166,  246,  242,  512,  512,  402,  408,
      417,  412,  175,  413,  399,  397,  398,  166,  411,  406,
      408,  404,  396,  402,  389,  404,    0,  399,  389,  388,
      390,    0,  393,  380,  393,  388,    0,    0,  385,  379,
      374,  375,  381,  372,  374,  376,  383,  369,  367,  367,

      369,  366,  368,  376,    0,  375,  370,  365,  373,  365,
      370,  260,  263,  285,  512,  265,  287,  270,  277,  358,
        0,  363,    0,    0,    0,  364,    0,  354,  361,  351,
      359,  348,  348,  354,    0,    0,  351,  358,  344,  348,
        0,  344,  340,    0,  347,  340,  336,    0,  354,  353,
      348,  343,  335,  332,  344,  334,  338,  343,  342,  333,
        0,  322,    0,  338,  334,  333,    0,  334,    0,  267,
      304,  337,    0,    0,    0,  326,    0,  323,  324,  329,
      328,  328,    0,    0,  327,  312,  325,  323,  312,  321,
      303,  296,  310,  309,  298,    0,  305,  302,  304,  288,

      297,  303,    0,  298,  289,    0,    0,  298,  295,  280,
      276,    0,    0,  275,    0,  291,  285,    0,  286,    0,
      272,  278,  264,  297,    0,    0,    0,    0,    0,    0,
      259,  270,  270,  255,  256,  254,    0,    0,  251,    0,
      248,  233,  260,  233,  512,  229,    0,  224,    0,  222,
        0,  207,  209,    0,  512,  204,    0,    0,  178,  180,
        0,  203,  176,    0,  512,  157,  103,  100,   86,   45,
        0,  512,  357,  361,  363,   79
    } ;

static yyconst short int yy_def[377] =
    {   0,
      372,    1,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  373,  372,  372,  374,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  375,  372,  372,  372,  372,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  372,  372,  372,  372,
      372,  373,  372,  373,  372,  372,  372,  374,  374,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  376,   26,  372,
      372,  372,  372,  372,  372,  375,  372,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  376,  372,  372,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  372,  372,  372,  372,  372,  372,  372,  372,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  372,
      372,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  372,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  372,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  372,  375,  375,  375,  375,  375,
      375,    0,  372,  372,  372,  372
    } ;

static yyconst short int yy_nxt[583] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       33,   33,   33,   33,   33,   33,   33,   34,   35,   36,
       37,   33,   38,   39,   40,   41,   42,   43,   44,   33,
       45,   33,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   33,   33,   33,   57,   58,   59,   60,
       63,   66,   70,   72,   77,   77,   74,   78,   71,   91,
       92,  156,   79,   73,   75,   76,   67,  106,   80,   94,
       95,  181,   99,  371,  100,  127,  107,  102,  128,   64,

       81,  101,   82,   82,  103,  125,  182,  104,  141,  142,
      105,   83,   84,   85,  126,   86,   87,   88,  108,  116,
      109,  111,  130,  131,   83,  117,  118,   84,   85,  110,
      143,  112,  132,   86,  113,  133,  114,   63,  121,  138,
      370,   87,  122,  139,   88,   81,  372,   89,   89,  145,
      369,  123,  134,  185,   68,  135,  124,   84,   85,  186,
       86,   87,  368,  136,  153,  153,   64,  163,  164,  169,
      137,  144,   84,   85,  170,   69,  167,  168,   86,   77,
       77,   87,   87,  148,  148,  196,   87,  155,  155,  146,
      147,  198,  147,  149,  150,  154,  150,  154,  191,   87,

      155,  155,  197,  192,  146,  147,  199,   87,  149,  150,
      147,   87,   87,  202,  150,   81,  367,   82,   82,  204,
      203,  224,  366,  205,  230,  231,  365,   84,   85,   87,
      151,  152,  364,  212,  225,  212,  363,   87,  213,  213,
      148,  148,   84,   85,  152,  152,  152,  152,  151,  362,
      214,  215,  216,  215,  216,  361,  152,  217,  217,  360,
      153,  153,  152,  359,  152,  214,  215,  155,  155,  358,
      152,  215,  152,  218,  218,  357,  219,  219,   85,  356,
       85,  213,  213,  355,  213,  213,  217,  217,  271,  271,
      354,  218,  353,   85,  219,  147,  352,  147,   85,  218,

      351,  270,  219,  270,  218,  218,  271,  271,  217,  217,
      147,  219,  219,  350,  349,  147,  348,  347,  346,  150,
      345,  150,  218,  344,  343,  271,  271,  342,  341,  219,
      218,  340,  339,  338,  150,  337,  215,  219,  215,  150,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  215,  325,  324,  323,  322,  215,   62,   62,   62,
       62,   68,  321,   68,   68,   96,   96,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,

      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  229,  228,  227,  226,  223,  222,
      221,  220,  211,  210,  209,  208,  207,  206,  201,  200,
      195,  194,  193,  190,  189,  188,  187,  184,  183,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  166,
      165,  162,  161,  160,  159,  158,  157,  372,  140,  129,

      120,  119,  115,   98,   97,   93,   90,   69,   65,   61,
      372,    3,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372
    } ;

static yyconst short int yy_chk[583] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       13,   15,   19,   20,   23,   23,   22,   24,   19,   29,
       29,  376,   24,   20,   22,   22,   15,   41,   24,   31,
       31,  118,   39,  370,   39,   50,   41,   40,   50,   13,

       25,   39,   25,   25,   40,   49,  118,   40,   56,   56,
       40,   25,   25,   25,   49,   25,   25,   25,   42,   45,
       42,   43,   52,   52,   25,   45,   45,   25,   25,   42,
       58,   43,   52,   25,   43,   52,   43,   62,   48,   54,
      369,   25,   48,   54,   25,   26,   69,   26,   26,   68,
      368,   48,   53,  121,   69,   53,   48,   26,   26,  121,
       26,   26,  367,   53,   83,   83,   62,  102,  102,  106,
       53,   58,   26,   26,  106,   68,  105,  105,   26,   77,
       77,   86,   86,   81,   81,  131,   26,  154,  154,   77,
       77,  132,   77,   81,   81,   84,   81,   84,  127,   86,

       84,   84,  131,  127,   77,   77,  132,   86,   81,   81,
       77,   87,   87,  135,   81,   82,  366,   82,   82,  136,
      135,  163,  363,  136,  168,  168,  362,   82,   82,   87,
       82,   82,  360,  146,  163,  146,  359,   87,  146,  146,
      148,  148,   82,   82,  151,  151,  152,  152,   82,  356,
      148,  148,  149,  148,  149,  353,   82,  149,  149,  352,
      153,  153,  151,  350,  152,  148,  148,  155,  155,  348,
      151,  148,  152,  153,  153,  346,  156,  156,  155,  344,
      155,  212,  212,  343,  213,  213,  216,  216,  270,  270,
      342,  153,  341,  155,  156,  213,  339,  213,  155,  153,

      336,  214,  156,  214,  218,  218,  214,  214,  217,  217,
      213,  219,  219,  335,  334,  213,  333,  332,  331,  217,
      324,  217,  218,  323,  322,  271,  271,  321,  319,  219,
      218,  317,  316,  314,  217,  311,  271,  219,  271,  217,
      310,  309,  308,  305,  304,  302,  301,  300,  299,  298,
      297,  271,  295,  294,  293,  292,  271,  373,  373,  373,
      373,  374,  291,  374,  374,  375,  375,  290,  289,  288,
      287,  286,  285,  282,  281,  280,  279,  278,  276,  272,
      268,  266,  265,  264,  262,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  247,  246,  245,

      243,  242,  240,  239,  238,  237,  234,  233,  232,  231,
      230,  229,  228,  226,  222,  220,  211,  210,  209,  208,
      207,  206,  204,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  190,  189,  186,  185,
      184,  183,  181,  180,  179,  178,  176,  175,  174,  173,
      172,  171,  170,  169,  167,  166,  165,  164,  162,  161,
      160,  159,  142,  141,  140,  139,  138,  137,  134,  133,
      130,  129,  128,  126,  124,  123,  122,  120,  119,  117,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  104,
      103,  101,  100,   99,   98,   95,   91,   64,   55,   51,

       47,   46,   44,   38,   37,   30,   27,   16,   14,   12,
        3,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
/* ------------------------------------------------------------------
   Initial code (copied verbatim to the output file)
   ------------------------------------------------------------------*/
#line 5 "lexer.l"

/* add to top:
#include "code.h"
BEGIN_CODE_NAMESPACE
#define YY_SKIP_YYWRAP
*/

END_CODE_NAMESPACE

#include "xalloc.h"
#include "aklabeth_lexer.h"
#include <cstring>

BEGIN_CODE_NAMESPACE

/* -----------------------------------------------------------------*/

void
c_comment();

void
cpp_comment();

void
extract_string_literal();

void
extract_tag();

/* -----------------------------------------------------------------*/

#define YY_INPUT(buf,result,max_size)\
	result = g_yystream->read_some_bytes( buf, max_size );\

#define ECHO

#define isatty(x) 0

/* -----------------------------------------------------------------*/

input_stream_t*			g_yystream = 0;

/* ------------------------------------------------------------------
   Some macros (standard regular expressions)
   ------------------------------------------------------------------*/
/* ------------------------------------------------------------------
   The lexer rules
   ------------------------------------------------------------------*/
#line 665 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 73 "lexer.l"


#line 815 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 373 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 512 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return token_CommentBegin; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return token_CommentEnd; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 77 "lexer.l"
{ cpp_comment(); return token_CommentCpp; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return token_Unsigned; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return token_Signed; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return token_Bool; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return token_Byte; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return token_Char; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return token_Double; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return token_Float; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return token_Int; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return token_Long; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return token_Wide; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return token_Short; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return token_Sizeof; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return token_Void; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return token_True; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return token_False; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return token_Typedef; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return token_Static; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return token_Const; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return token_Native; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return token_Abstract; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return token_Public; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return token_Private; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return token_Protected; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return token_Friend; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return token_Using; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return token_Case; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return token_Default; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return token_If; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return token_Else; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return token_Switch; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return token_While; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return token_Do; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return token_For; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return token_Goto; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return token_Continue; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return token_Break; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return token_Return; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return token_Struct; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return token_Class; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return token_Extends; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return token_New; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return token_Delete; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return token_Null; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return token_This; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return token_NotOp; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return token_Cast; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return token_Include; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return token_Module; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return token_Operator; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return token_Enum; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return token_Try; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return token_Catch; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return token_Throw; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return token_Namespace; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return token_Template; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return token_Of; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return token_ImportDll; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return token_CompilerSetting; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 141 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_Identifier; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 143 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_HexConstant; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 144 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_BinConstant; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 145 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_OctConstant; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 146 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_IntConstant; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 147 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_ChrConstant; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 149 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_FltConstant; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 150 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_FltConstant; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 151 "lexer.l"
{ yylval.text = xstrdup( yytext ); return token_FltConstant; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 154 "lexer.l"
{  extract_string_literal(); return token_StringLiteral; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return token_StrawQuotation; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 158 "lexer.l"
{ extract_tag(); return token_Tag; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return token_ShrOp; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "lexer.l"
{ return token_ShlOp; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return token_IncOp; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return token_DecOp; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return token_PtrOp; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return token_Dot; };
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return token_LeOp; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return token_GeOp; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return token_EqOp; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return token_NeOp; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return token_AndOp; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return token_OrOp; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return token_ScopeOp; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return token_MulAssign; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return token_DivAssign; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return token_ModAssign; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return token_AddAssign; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return token_SubAssign; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return token_ShlAssign; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return token_ShrAssign; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return token_AndAssign; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return token_XorAssign; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return token_OrAssign; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return token_BrackOpen; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return token_BrackClose; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return token_ParenOpen; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return token_ParenClose; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return token_DelimOpen; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return token_DelimClose; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return token_Star; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return token_Slash; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return token_Backslash; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return token_Percent; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return token_Plus; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return token_Minus; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return token_ClampOpen; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return token_ClampClose; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return token_And; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return token_Xor; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return token_Or; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return token_QuestionMark; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return token_Colon; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return token_Assign; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return token_Comma; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return token_Semicolon; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return token_Not; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 209 "lexer.l"
{ }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 210 "lexer.l"
{ }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 211 "lexer.l"
{ }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 212 "lexer.l"
{ }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 213 "lexer.l"
{ }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 214 "lexer.l"
{ }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 216 "lexer.l"
ECHO;
	YY_BREAK
#line 1528 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 2);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 373 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 2;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 373 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 372);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 216 "lexer.l"


/* ------------------------------------------------------------------
   Additional code (again copied verbatim to the output file)
   ------------------------------------------------------------------*/

void
cpp_comment()
{
	char c;
	istring s;

	while( true )
	{
		c = yyinput();
		if( c == '\0' || c == '\n' )
			break;
		s.append( 1, c );
	}
	
	yylval.text = xstrdup( s.c_str() );
}

void
extract_string_literal()
{
	const char*			s = yytext + 1;
	const size_t		length = ( istrlen( s ) + 1 ) * sizeof( char );
	char*				t = (char*)xalloc( length );
	
	char*				p = t;
	char				c;
	bool				done = false;
	
	do {
		c = *s++;
		
		switch( c )
		{
			case '\\':
				switch( *s++ )
				{
					case 'n':
						c = '\n';
						break;

					case 't':
						c = '\t';
						break;

					case 'r':
						c = '\r';
						break;
						
					case '\"':
						c = '\"';
						break;

					case '\'':
						c = '\'';
						break;

					case '\\':
						c = '\\';
						break;
				
					default:
						s--;
						break;
				}
				break;
		
			case '\"':
				c = '\0';
				done = true;
				break;
		}

		*p++ = c;
	} while( done == false );

	yylval.text = t;
}

void
extract_tag()
{
	iptr_t				val = 0;
	
	for( int i = ICARUS_PTR_SIZE * 2 - 1; i >= 0; i-- )
	{
		char			c = yyinput();
		int				digit;
		
		if( c >= 'a' )
			digit = 10 + c - 'a';
		else
			digit = c - '0';
			
		val <<= 4;
		val |= digit;
	}

	yyinput();

	
	yylval.tag = (tag_t*)val;
}

void
init_lexer(
	input_stream_t*		yystream )
{
	g_yystream = yystream;
}

void
cleanup_lexer()
{
	g_yystream = 0;
}

END_CODE_NAMESPACE
